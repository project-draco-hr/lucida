{
  int read;
  int totalRead=0;
  final int bytesToRead=bytesPerRead;
  byte[] samplesBuffer=new byte[bytesPerRead];
  long firstSample=totalValuesRead;
  try {
    do {
      read=dataStream.read(samplesBuffer,totalRead,bytesToRead - totalRead);
      if (read > 0) {
        totalRead+=read;
      }
    }
 while (read != -1 && totalRead < bytesToRead);
    if (totalRead <= 0) {
      closeDataStream();
      return null;
    }
    totalValuesRead+=(totalRead / bytesPerValue);
    if (totalRead < bytesToRead) {
      totalRead=(totalRead % 2 == 0) ? totalRead + 2 : totalRead + 3;
      byte[] shrinkedBuffer=new byte[totalRead];
      System.arraycopy(samplesBuffer,0,shrinkedBuffer,0,totalRead);
      samplesBuffer=shrinkedBuffer;
      closeDataStream();
    }
  }
 catch (  IOException ioe) {
    throw new DataProcessingException("Error reading data",ioe);
  }
  double[] doubleData;
  if (bigEndian) {
    doubleData=DataUtil.bytesToValues(samplesBuffer,0,totalRead,bytesPerValue,signedData);
  }
 else {
    doubleData=DataUtil.littleEndianBytesToValues(samplesBuffer,0,totalRead,bytesPerValue,signedData);
  }
  return new DoubleData(doubleData,sampleRate,firstSample);
}
