{
  text=text.toLowerCase();
  Word word=lookupWord(text);
  if (word == null) {
    logger.warning("The dictionary is missing a phonetic transcription for the word '" + text + "'");
    if (wordReplacement != null) {
      word=lookupWord(wordReplacement);
      logger.warning("Replacing " + text + " with "+ wordReplacement);
      if (word == null) {
        logger.severe("Replacement word " + wordReplacement + " not found!");
      }
    }
 else     if (allowMissingWords) {
      if (createMissingWords) {
        if (g2pModelFile != null && !g2pModelFile.getPath().equals("")) {
          logger.warning("Generating phonetic transcription(s) for the word '" + text + "' using g2p model");
          ArrayList<Path> paths=g2pDecoder.phoneticize(text,g2pMaxPron);
          List<Pronunciation> pronunciations=new LinkedList<Pronunciation>();
          for (          Path p : paths) {
            int unitCount=p.getPath().size();
            ArrayList<Unit> units=new ArrayList<Unit>(unitCount);
            for (            String token : p.getPath()) {
              units.add(getCIUnit(token,false));
            }
            pronunciations.add(new Pronunciation(units));
            if (addSilEndingPronunciation) {
              units.add(UnitManager.SILENCE);
              pronunciations.add(new Pronunciation(units));
            }
          }
          Pronunciation[] pronunciationsArray=pronunciations.toArray(new Pronunciation[pronunciations.size()]);
          word=new Word(text,pronunciationsArray,false);
          for (          Pronunciation pronunciation : pronunciationsArray) {
            pronunciation.setWord(word);
          }
          wordDictionary.put(text,word);
        }
 else {
          word=new Word(text,null,false);
          wordDictionary.put(text,word);
          return null;
        }
      }
 else {
        return null;
      }
    }
 else {
      return null;
    }
  }
  return word;
}
