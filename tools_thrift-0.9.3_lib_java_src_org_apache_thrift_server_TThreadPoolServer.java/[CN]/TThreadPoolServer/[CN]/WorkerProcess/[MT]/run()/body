{
  TProcessor processor=null;
  TTransport inputTransport=null;
  TTransport outputTransport=null;
  TProtocol inputProtocol=null;
  TProtocol outputProtocol=null;
  TServerEventHandler eventHandler=null;
  ServerContext connectionContext=null;
  try {
    processor=processorFactory_.getProcessor(client_);
    inputTransport=inputTransportFactory_.getTransport(client_);
    outputTransport=outputTransportFactory_.getTransport(client_);
    inputProtocol=inputProtocolFactory_.getProtocol(inputTransport);
    outputProtocol=outputProtocolFactory_.getProtocol(outputTransport);
    eventHandler=getEventHandler();
    if (eventHandler != null) {
      connectionContext=eventHandler.createContext(inputProtocol,outputProtocol);
    }
    while (true) {
      if (eventHandler != null) {
        eventHandler.processContext(connectionContext,inputTransport,outputTransport);
      }
      if (stopped_ || !processor.process(inputProtocol,outputProtocol)) {
        break;
      }
    }
  }
 catch (  TSaslTransportException ttx) {
  }
catch (  TTransportException ttx) {
  }
catch (  TException tx) {
    LOGGER.error("Thrift error occurred during processing of message.",tx);
  }
catch (  Exception x) {
    LOGGER.error("Error occurred during processing of message.",x);
  }
 finally {
    if (eventHandler != null) {
      eventHandler.deleteContext(connectionContext,inputProtocol,outputProtocol);
    }
    if (inputTransport != null) {
      inputTransport.close();
    }
    if (outputTransport != null) {
      outputTransport.close();
    }
    if (client_.isOpen()) {
      client_.close();
    }
  }
}
