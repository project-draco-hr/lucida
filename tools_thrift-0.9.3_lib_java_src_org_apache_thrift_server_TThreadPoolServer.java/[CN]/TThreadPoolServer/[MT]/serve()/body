{
  try {
    serverTransport_.listen();
  }
 catch (  TTransportException ttx) {
    LOGGER.error("Error occurred during listening.",ttx);
    return;
  }
  if (eventHandler_ != null) {
    eventHandler_.preServe();
  }
  stopped_=false;
  setServing(true);
  int failureCount=0;
  while (!stopped_) {
    try {
      TTransport client=serverTransport_.accept();
      WorkerProcess wp=new WorkerProcess(client);
      int retryCount=0;
      long remainTimeInMillis=requestTimeoutUnit.toMillis(requestTimeout);
      while (true) {
        try {
          executorService_.execute(wp);
          break;
        }
 catch (        Throwable t) {
          if (t instanceof RejectedExecutionException) {
            retryCount++;
            try {
              if (remainTimeInMillis > 0) {
                long sleepTimeInMillis=((long)(random.nextDouble() * (1L << Math.min(retryCount,20)))) * beBackoffSlotInMillis;
                sleepTimeInMillis=Math.min(sleepTimeInMillis,remainTimeInMillis);
                TimeUnit.MILLISECONDS.sleep(sleepTimeInMillis);
                remainTimeInMillis=remainTimeInMillis - sleepTimeInMillis;
              }
 else {
                client.close();
                wp=null;
                LOGGER.warn("Task has been rejected by ExecutorService " + retryCount + " times till timedout, reason: "+ t);
                break;
              }
            }
 catch (            InterruptedException e) {
              LOGGER.warn("Interrupted while waiting to place client on executor queue.");
              Thread.currentThread().interrupt();
              break;
            }
          }
 else           if (t instanceof Error) {
            LOGGER.error("ExecutorService threw error: " + t,t);
            throw (Error)t;
          }
 else {
            LOGGER.warn("ExecutorService threw error: " + t,t);
            break;
          }
        }
      }
    }
 catch (    TTransportException ttx) {
      if (!stopped_) {
        ++failureCount;
        LOGGER.warn("Transport error occurred during acceptance of message.",ttx);
      }
    }
  }
  executorService_.shutdown();
  long timeoutMS=stopTimeoutUnit.toMillis(stopTimeoutVal);
  long now=System.currentTimeMillis();
  while (timeoutMS >= 0) {
    try {
      executorService_.awaitTermination(timeoutMS,TimeUnit.MILLISECONDS);
      break;
    }
 catch (    InterruptedException ix) {
      long newnow=System.currentTimeMillis();
      timeoutMS-=(newnow - now);
      now=newnow;
    }
  }
  setServing(false);
}
