{
  int length1=((string1 == null) ? 0 : string1.length());
  int length2=((string2 == null) ? 0 : string2.length());
  if ((Math.abs(length1 - length2) > threshold) && (threshold > 0))   return (threshold + 1);
  int[][] distanceMatrix=new int[length1 + 1][length2 + 1];
  distanceMatrix[0][0]=0;
  int limit=1;
  int minLength=((length1 > length2) ? length2 : length1);
  int cost;
  int substitutionCost=((insertCost + deleteCost) / 2);
  int distance=0;
  while (limit <= minLength) {
    distanceMatrix[limit][0]=(limit * insertCost);
    distanceMatrix[0][limit]=(limit * deleteCost);
    for (int c=1; c < limit; c++) {
      cost=getCost(string1.charAt(c - 1),string2.charAt(limit - 1),substitutionCost,caseSensitive);
      distance=min3(distanceMatrix[c - 1][limit] + deleteCost,distanceMatrix[c][limit - 1] + insertCost,distanceMatrix[c - 1][limit - 1] + cost);
      distanceMatrix[c][limit]=distance;
    }
    for (int l=1; l < limit; l++) {
      cost=getCost(string1.charAt(limit - 1),string2.charAt(l - 1),substitutionCost,caseSensitive);
      distance=min3(distanceMatrix[limit - 1][l] + deleteCost,distanceMatrix[limit][l - 1] + insertCost,distanceMatrix[limit - 1][l - 1] + cost);
      distanceMatrix[limit][l]=distance;
    }
    cost=getCost(string1.charAt(limit - 1),string2.charAt(limit - 1),substitutionCost,caseSensitive);
    distance=min3(distanceMatrix[limit - 1][limit] + deleteCost,distanceMatrix[limit][limit - 1] + insertCost,distanceMatrix[limit - 1][limit - 1] + cost);
    if ((distance > threshold) && (threshold > 0))     return (threshold + 1);
    distanceMatrix[limit][limit]=distance;
    limit++;
  }
  while (limit <= length1) {
    distanceMatrix[limit][0]=(limit * insertCost);
    for (int l=1; l <= length2; l++) {
      cost=getCost(string1.charAt(limit - 1),string2.charAt(l - 1),substitutionCost,caseSensitive);
      distance=min3(distanceMatrix[limit - 1][l] + deleteCost,distanceMatrix[limit][l - 1] + insertCost,distanceMatrix[limit - 1][l - 1] + cost);
      distanceMatrix[limit][l]=distance;
    }
    if ((distance > threshold) && (threshold > 0))     return (threshold + 1);
    limit++;
  }
  while (limit <= length2) {
    distanceMatrix[0][limit]=(limit * deleteCost);
    for (int c=1; c <= length1; c++) {
      cost=getCost(string1.charAt(c - 1),string2.charAt(limit - 1),substitutionCost,caseSensitive);
      distance=min3(distanceMatrix[c - 1][limit] + deleteCost,distanceMatrix[c][limit - 1] + insertCost,distanceMatrix[c - 1][limit - 1] + cost);
      distanceMatrix[c][limit]=distance;
    }
    if ((distance > threshold) && (threshold > 0))     return (threshold + 1);
    limit++;
  }
  return distanceMatrix[length1][length2];
}
