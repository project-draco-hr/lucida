{
  SSLContext ctx;
  InputStream in=null;
  InputStream is=null;
  try {
    ctx=SSLContext.getInstance(params.protocol);
    TrustManagerFactory tmf=null;
    KeyManagerFactory kmf=null;
    if (params.isTrustStoreSet) {
      tmf=TrustManagerFactory.getInstance(params.trustManagerType);
      KeyStore ts=KeyStore.getInstance(params.trustStoreType);
      in=getStoreAsStream(params.trustStore);
      ts.load(in,(params.trustPass != null ? params.trustPass.toCharArray() : null));
      tmf.init(ts);
    }
    if (params.isKeyStoreSet) {
      kmf=KeyManagerFactory.getInstance(params.keyManagerType);
      KeyStore ks=KeyStore.getInstance(params.keyStoreType);
      is=getStoreAsStream(params.keyStore);
      ks.load(is,params.keyPass.toCharArray());
      kmf.init(ks,params.keyPass.toCharArray());
    }
    if (params.isKeyStoreSet && params.isTrustStoreSet) {
      ctx.init(kmf.getKeyManagers(),tmf.getTrustManagers(),null);
    }
 else     if (params.isKeyStoreSet) {
      ctx.init(kmf.getKeyManagers(),null,null);
    }
 else {
      ctx.init(null,tmf.getTrustManagers(),null);
    }
  }
 catch (  Exception e) {
    throw new TTransportException("Error creating the transport",e);
  }
 finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return ctx;
}
