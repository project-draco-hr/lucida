{
  MsgPrinter.enableStatusMsgs(true);
  MsgPrinter.enableErrorMsgs(true);
  if (args.length < 2) {
    MsgPrinter.printUsage("java ScoreNormalizationFilter " + "serialized_results_dir output_dir");
    System.exit(1);
  }
  String serializedDir=args[0];
  String outputDir=args[1];
  String[] features=SELECTED_FEATURES;
  String model=SELECTED_MODEL;
  String msg="Training classifier using model " + model + " with feature(s) "+ StringUtils.concat(features,", ")+ " ("+ MsgPrinter.getTimestamp()+ ")...";
  MsgPrinter.printStatusMsg(StringUtils.repeat("-",msg.length()));
  MsgPrinter.printStatusMsg(msg);
  MsgPrinter.printStatusMsg(StringUtils.repeat("-",msg.length()));
  Classifier classifier=train(serializedDir,features,model);
  String classifiersDir=new File(outputDir,"classifiers").getPath();
  String[] dataSets=FileUtils.getVisibleSubDirs(serializedDir);
  String filename=model + "_" + StringUtils.concat(features,"+")+ "_"+ StringUtils.concat(dataSets,"+")+ ".serialized";
  try {
    FileUtils.writeSerialized(classifier,new File(classifiersDir,filename));
  }
 catch (  IOException e) {
    MsgPrinter.printErrorMsg("Failed to serialize classifier to file " + filename + ":");
    MsgPrinter.printErrorMsg(e.toString());
    System.exit(1);
  }
  MsgPrinter.printStatusMsg("...done.");
}
