{
  Srv.Iface handler=new Srv.Iface(){
    public int Janky(    int i32arg) throws TException {
      return i32arg * 2;
    }
    public int primitiveMethod() throws TException {
      return 0;
    }
    public CompactProtoTestStruct structMethod() throws TException {
      return null;
    }
    public void voidMethod() throws TException {
    }
    public void methodWithDefaultArgs(    int something) throws TException {
    }
    @Override public void onewayMethod() throws TException {
    }
  }
;
  Srv.Processor testProcessor=new Srv.Processor(handler);
  TMemoryBuffer clientOutTrans=new TMemoryBuffer(0);
  TProtocol clientOutProto=getFactory().getProtocol(clientOutTrans);
  TMemoryBuffer clientInTrans=new TMemoryBuffer(0);
  TProtocol clientInProto=getFactory().getProtocol(clientInTrans);
  Srv.Client testClient=new Srv.Client(clientInProto,clientOutProto);
  testClient.send_Janky(1);
  testProcessor.process(clientOutProto,clientInProto);
  assertEquals(2,testClient.recv_Janky());
}
