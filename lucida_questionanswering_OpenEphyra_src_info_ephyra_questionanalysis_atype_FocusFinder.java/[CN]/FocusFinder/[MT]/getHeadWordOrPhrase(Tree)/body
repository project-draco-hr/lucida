{
  TreeHelper.markHeadNode(tree);
  Tree headChild=tree.getHeadNode();
  if (!headChild.isPreterminal())   return getHeadWordOrPhrase(headChild);
  List<Tree> pretermChildren=new ArrayList<Tree>();
  for (  Tree child : tree.getChildren()) {
    if (child.isPreterminal() && !child.getLabel().equals("DT"))     pretermChildren.add(child);
  }
  for (ListIterator<Tree> it=pretermChildren.listIterator(); it.hasNext(); ) {
    Tree t=it.next();
    StringBuilder phrase=new StringBuilder();
    List<Tree> nodes=new ArrayList<Tree>();
    nodes.add(t);
    phrase.append(t.getHeadWord() + " ");
    for (ListIterator<Tree> it2=pretermChildren.listIterator(it.nextIndex()); it2.hasNext(); ) {
      Tree t2=it2.next();
      phrase.append(t2.getHeadWord() + " ");
      nodes.add(t2);
    }
    String phr=phrase.toString().trim();
    int phrSpaces=0;
    Matcher m=Pattern.compile(" ").matcher(phr);
    while (m.find())     phrSpaces++;
    try {
      IndexWord indexWord=Dictionary.getInstance().lookupIndexWord(POS.NOUN,phr);
      if (indexWord == null)       throw new Exception("Failed to get index word");
      int wrdSpaces=0;
      Matcher m2=Pattern.compile(" ").matcher(indexWord.getLemma());
      while (m2.find())       wrdSpaces++;
      if (wrdSpaces != phrSpaces)       continue;
    }
 catch (    Exception e) {
      continue;
    }
    if (nodes.size() == 1)     return nodes.get(0);
 else     return Tree.newNode("NP",nodes);
  }
  return tree.getHeadNode();
}
