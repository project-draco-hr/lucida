{
  if (results.length == 0)   return results;
  ArrayList<Result> allResults=new ArrayList<Result>();
  HashSet<Result> ssSet=new HashSet<Result>();
  for (  Result result : results) {
    Query query=result.getQuery();
    Predicate[] ps=query.getAnalyzedQuestion().getPredicates();
    if (!query.extractWith(FactoidsFromPredicatesFilter.ID) || ps.length == 0 || result.getScore() != 0) {
      allResults.add(result);
      continue;
    }
    Hashtable<String[],Double> verbFormsMap=getAllVerbForms(ps);
    ArrayList<String> verbPatterns=new ArrayList<String>();
    ArrayList<Double> verbWeights=new ArrayList<Double>();
    for (    String[] verbForms : verbFormsMap.keySet()) {
      String verbPattern="(?i).*?\\b(" + StringUtils.concat(verbForms,"|") + ")\\b.*+";
      verbPatterns.add(verbPattern);
      verbWeights.add(verbFormsMap.get(verbForms));
    }
    String[] paragraphs=result.getAnswer().split("\\n");
    for (    String p : paragraphs) {
      boolean contains=false;
      for (      String verbPattern : verbPatterns) {
        if (p.matches(verbPattern)) {
          contains=true;
          break;
        }
      }
      if (!contains)       continue;
      String[] sentences=LingPipe.sentDetect(p);
      for (      String s : sentences) {
        Double weight=0d;
        for (int i=0; i < verbPatterns.size(); i++) {
          if (s.matches(verbPatterns.get(i))) {
            weight=verbWeights.get(i);
            break;
          }
        }
        if (weight == 0d)         continue;
        s=s.replaceAll("\\s++"," ").trim();
        Result sentence=result.getCopy();
        sentence.setAnswer(s);
        sentence.setScore(weight.floatValue());
        ssSet.add(sentence);
      }
    }
  }
  Result[] ss=ssSet.toArray(new Result[ssSet.size()]);
  ss=(new ScoreSorterFilter()).apply(ss);
  ArrayList<Result> ssList=new ArrayList<Result>();
  for (  Result s : ss) {
    s.setScore(0);
    if (checkSentence(s))     ssList.add(s);
    if (ssList.size() >= MAX_SENTENCES)     break;
  }
  ss=ssList.toArray(new Result[ssList.size()]);
  if (ss.length == 0)   return allResults.toArray(new Result[allResults.size()]);
  String[] sentences=new String[ss.length];
  for (int i=0; i < ss.length; i++)   sentences[i]=ss[i].getAnswer();
  String[][] ass=ASSERT.annotatePredicates(sentences);
  for (int i=0; i < ass.length; i++) {
    Term[] terms=ss[i].getTerms();
    Predicate[] questionPs=ss[i].getQuery().getAnalyzedQuestion().getPredicates();
    for (int j=0; j < ass[i].length; j++) {
      Predicate predicate=null;
      try {
        predicate=new Predicate(sentences[i],ass[i][j],terms);
      }
 catch (      ParseException e) {
        continue;
      }
      double simScore=0;
      Predicate simPredicate=null;
      for (      Predicate questionP : questionPs)       if (questionP.hasMissingArgs()) {
        double currSimScore=predicate.simScore(questionP);
        if (currSimScore > simScore) {
          simScore=currSimScore;
          simPredicate=questionP;
        }
      }
      if (simScore > 0) {
        predicate.setSimScore(simScore);
        predicate.setSimPredicate(simPredicate);
        Result result=ss[i].getCopy();
        result.setAnswer(ass[i][j]);
        result.setSentence(sentences[i]);
        result.setPredicate(predicate);
        allResults.add(result);
      }
    }
  }
  return allResults.toArray(new Result[allResults.size()]);
}
