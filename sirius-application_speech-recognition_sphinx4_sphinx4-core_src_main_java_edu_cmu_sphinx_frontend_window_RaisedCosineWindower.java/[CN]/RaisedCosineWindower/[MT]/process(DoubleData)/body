{
  double[] in=input.getValues();
  int length=overflowBuffer.getOccupancy() + in.length;
  List<DoubleData> dataList=new LinkedList<DoubleData>();
  dataList.add(input);
  Data utteranceEnd=null;
  while (length < cosineWindow.length) {
    Data next=getPredecessor().getData();
    if (next instanceof DoubleData) {
      dataList.add((DoubleData)next);
      length+=((DoubleData)next).getValues().length;
    }
 else {
      if (next instanceof DataEndSignal || next instanceof SpeechEndSignal) {
        utteranceEnd=next;
        break;
      }
      outputQueue.add(next);
    }
  }
  double[] allSamples=in;
  if (length != in.length) {
    allSamples=new double[length];
    System.arraycopy(overflowBuffer.getBuffer(),0,allSamples,0,overflowBuffer.getOccupancy());
    int start=overflowBuffer.getOccupancy();
    for (    DoubleData aDataList : dataList) {
      double[] samples=aDataList.getValues();
      System.arraycopy(samples,0,allSamples,start,samples.length);
      start+=samples.length;
    }
  }
  int residual=applyRaisedCosineWindow(allSamples,length);
  overflowBuffer.reset();
  if (length - residual > 0) {
    overflowBuffer.append(allSamples,residual,length - residual);
  }
  if (utteranceEnd != null) {
    processUtteranceEnd();
    outputQueue.add(utteranceEnd);
  }
}
