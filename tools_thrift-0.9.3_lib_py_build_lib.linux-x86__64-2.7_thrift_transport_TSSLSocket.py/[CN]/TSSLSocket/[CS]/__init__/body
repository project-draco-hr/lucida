def __init__(self, host='localhost', port=9090, validate=True, ca_certs=None, keyfile=None, certfile=None, unix_socket=None, ciphers=None):
    "Create SSL TSocket\n\n    @param validate: Set to False to disable SSL certificate validation\n    @type validate: bool\n    @param ca_certs: Filename to the Certificate Authority pem file, possibly a\n    file downloaded from: http://curl.haxx.se/ca/cacert.pem  This is passed to\n    the ssl_wrap function as the 'ca_certs' parameter.\n    @type ca_certs: str\n    @param keyfile: The private key\n    @type keyfile: str\n    @param certfile: The cert file\n    @type certfile: str\n    @param ciphers: The cipher suites to allow. This is passed to\n                    the ssl_wrap function as the 'ciphers' parameter.\n    @type ciphers: str\n    \n    Raises an IOError exception if validate is True and the ca_certs file is\n    None, not present or unreadable.\n    "
    self.validate = validate
    self.is_valid = False
    self.peercert = None
    if (not validate):
        self.cert_reqs = ssl.CERT_NONE
    else:
        self.cert_reqs = ssl.CERT_REQUIRED
    self.ca_certs = ca_certs
    self.keyfile = keyfile
    self.certfile = certfile
    self.ciphers = ciphers
    if validate:
        if ((ca_certs is None) or (not os.access(ca_certs, os.R_OK))):
            raise IOError(('Certificate Authority ca_certs file "%s" is not readable, cannot validate SSL certificates.' % ca_certs))
    TSocket.TSocket.__init__(self, host, port, unix_socket)
