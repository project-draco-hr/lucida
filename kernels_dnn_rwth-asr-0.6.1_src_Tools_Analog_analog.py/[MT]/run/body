def run():
    try:
        import optparse
    except ImportError:
        print 'Ask your system administrator to install, either a reasonably recent version of Python or "python-optik"!'
        sys.exit(1)
    optparser = optparse.OptionParser(usage=('%prog [options] <recognition log file(s)>...\n' + __doc__), version=('%prog ' + __version__))
    optparser.add_option('--verbose-errors', action='store_true', help='show a detailed report for parse errors')
    optparser.add_option('-f', '--field', action='append', dest='fields', help='select field F (use --list-fields to et a list)', metavar='F')
    optparser.add_option('-F', '--list-fields', action='store_true', help='show list of available fields')
    optparser.add_option('-b', '--table-format', action='store_true', dest='bootlog', help='print output in bootlog format')
    optparser.add_option('-g', '--gui', action='store_true', dest='gui', help='show fields in a Qt dialog')
    optparser.add_option('-m', '--merge', action='store_true', dest='merge', help='merge log files -\nBy default each log file is processed separately.  If merging is\nenabled all log files are combined before computing statistics.  This\nis useful e.g. when you split up a recognition task in a job array.\nHowever you can specify several groups to be merged by separating them\nwith a single slash "/".\ne.g.  --merge baseline-20k-recog.out.[123] / baseline-64k-recog.out.[123]\n\t')
    optparser.add_option('-u', '--mutate', action='append', dest='mutations', default=[], help='apply mutator M to log file data before further processing (order may important)', metavar='M')
    optparser.add_option('-U', '--list-mutators', action='store_true', help='show list of available mutators')
    optparser.add_option('-r', '--group-by-speaker', action='store_true', dest='groupBySpeaker', help='group results by speaker')
    optparser.add_option('-s', '--group-by-level', metavar='N', type='int', dest='subcorpusDepth', default=1, help='group results by subcorpus level N')
    optparser.add_option('-l', '--layer', metavar='L', help='use only data from layer L')
    optparser.add_option('--full-name', action='store_true', default=False, dest='fullName', help='use full segment id in nist ctm output')
    optparser.add_option('-e', '--encoding', metavar='ENCODING', dest='encoding', default='ascii', help='use encoding for files (see below); default is ascii')
    optparser.add_option('--result', metavar='FILE', dest='resultFile', default='-', help='write results to FILE (default is standard out)')
    optparser.add_option('-c', '--convert', action='append', dest='extractionFormats', help='select extraction in format C (use --list-coversion-formats to et a list)', metavar='C')
    optparser.add_option('-C', '--list-coversion-formats', action='store_true', help='show list of available extraction formats')
    optparser.add_option('--force-overwrite', action='store_true', help='do not check if files to be written exist already.')
    for writer in Writer.allWriters:
        optparser.add_option(('--%s-postfix' % writer.id), dest=('%sPostfix' % writer.id), metavar='POSTFIX', help=('%s files will have the postfix POSTFIX' % writer.id), default=writer.defaultPostfix)
    optparser.add_option('--frame-shift', type='float', dest='frameShift', default=0.01, help='frame shift in seconds')
    optparser.add_option('--silence-lemma', dest='silenceLemma', default='[SILENCE]', help='orthographic form of the silence lemma')
    optparser.add_option('--karaoke-suppress-deletions', dest='karaokeSuppressDeletions', action='store_true', help='deletions are marked by underscore')
    optparser.add_option('--karaoke-compare-postfix', dest='karaokeComparePostfix', help='postfix for compare files')
    (options, args) = optparser.parse_args()
    if options.list_mutators:
        for s in sorted([mutator.id for mutator in Mutator.allMutators]):
            print s
        sys.exit()
    if options.list_fields:
        for s in sorted([('%s.%s' % (collector.id, field.name)) for (collector, field) in Collector.allFields]):
            print s
        sys.exit()
    if options.list_coversion_formats:
        for s in sorted([writer.id for writer in Writer.allWriters]):
            print s
        sys.exit()
    if (not args):
        optparser.print_help()
        sys.exit(1)
    if (options.fields is None):
        if options.extractionFormats:
            options.fields = []
        elif options.gui:
            options.fields = []
            for (collector, field) in Collector.allFields:
                if (not (collector.id in options.fields)):
                    options.fields.append(collector.id)
        else:
            options.fields = ['sb-wer', 'rtf']
    analog = Analog(options)
    analog.main(args)
