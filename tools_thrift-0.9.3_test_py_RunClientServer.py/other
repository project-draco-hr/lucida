from __future__ import division
import time
import socket
import subprocess
import sys
import os
import signal
from optparse import OptionParser
parser = OptionParser()
parser.add_option('--genpydirs', type='string', dest='genpydirs', default='default,slots,newstyle,newstyleslots,dynamic,dynamicslots', help='directory extensions for generated code, used as suffixes for "gen-py-*" added sys.path for individual tests')
parser.add_option('--port', type='int', dest='port', default=9090, help='port number for server to listen on')
parser.add_option('-v', '--verbose', action='store_const', dest='verbose', const=2, help='verbose output')
parser.add_option('-q', '--quiet', action='store_const', dest='verbose', const=0, help='minimal output')
parser.set_defaults(verbose=1)
(options, args) = parser.parse_args()
generated_dirs = []
for gp_dir in options.genpydirs.split(','):
    generated_dirs.append(('gen-py-%s' % gp_dir))
SCRIPTS = ['TSimpleJSONProtocolTest.py', 'SerializationTest.py', 'TestEof.py', 'TestSyntax.py', 'TestSocket.py']
FRAMED = ['TNonblockingServer']
SKIP_ZLIB = ['TNonblockingServer', 'THttpServer']
SKIP_SSL = ['TNonblockingServer', 'THttpServer']
EXTRA_DELAY = dict(TProcessPoolServer=5.5)
PROTOS = ['accel', 'binary', 'compact', 'json']
SERVERS = ['TSimpleServer', 'TThreadedServer', 'TThreadPoolServer', 'TProcessPoolServer', 'TForkingServer', 'TNonblockingServer', 'THttpServer']
try:
    import multiprocessing
except:
    print 'Warning: the multiprocessing module is unavailable. Skipping tests for TProcessPoolServer'
    SERVERS.remove('TProcessPoolServer')
try:
    import ssl
except:
    print 'Warning, no ssl module available. Skipping all SSL tests.'
    SKIP_SSL.extend(SERVERS)
if (len(args) == 1):
    if (args[0] in SERVERS):
        SERVERS = args
    else:
        print ('Unavailable server type "%s", please choose one of: %s' % (args[0], SERVERS))
        sys.exit(0)
test_count = 0
print '----------------'
print ' Executing individual test scripts with various generated code directories'
print (' Directories to be tested: ' + ', '.join(generated_dirs))
print (' Scripts to be tested: ' + ', '.join(SCRIPTS))
print '----------------'
for genpydir in generated_dirs:
    for script in SCRIPTS:
        runScriptTest(genpydir, script)
print '----------------'
print ' Executing Client/Server tests with various generated code directories'
print (' Servers to be tested: ' + ', '.join(SERVERS))
print (' Directories to be tested: ' + ', '.join(generated_dirs))
print (' Protocols to be tested: ' + ', '.join(PROTOS))
print ' Options to be tested: ZLIB(yes/no), SSL(yes/no)'
print '----------------'
for try_server in SERVERS:
    for genpydir in generated_dirs:
        for try_proto in PROTOS:
            for with_zlib in (False, True):
                if (with_zlib and (try_server in SKIP_ZLIB)):
                    continue
                for with_ssl in (False, True):
                    if (with_ssl and (try_server in SKIP_SSL)):
                        continue
                    test_count += 1
                    if (options.verbose > 0):
                        print ('\nTest run #%d:  (includes %s) Server=%s,  Proto=%s,  zlib=%s,  SSL=%s' % (test_count, genpydir, try_server, try_proto, with_zlib, with_ssl))
                    runServiceTest(genpydir, try_server, try_proto, options.port, with_zlib, with_ssl)
                    if (options.verbose > 0):
                        print ('OK: Finished (includes %s)  %s / %s proto / zlib=%s / SSL=%s.   %d combinations tested.' % (genpydir, try_server, try_proto, with_zlib, with_ssl, test_count))
