{
  Iterator<T> i=scoreableList.iterator();
  T best=i.next();
  best.calculateScore(data);
  while (i.hasNext()) {
    T scoreable=i.next();
    if (scoreable.calculateScore(data) > best.getScore()) {
      best=scoreable;
    }
  }
  return best;
  final int asize=512;
  final float[] values=new float[asize];
  for (int a=0; a < asize; a++) {
    values[a]=a;
  }
  final float[] squares=new float[asize];
  long startTime=System.currentTimeMillis();
  kernel.put(feat_vect);
  kernel.setExecutionMode(JTP);
  Range r=Range.create(max_senone_size);
  kernel.execute(r);
  long estimatedTime=System.currentTimeMillis() - startTime;
  gpu_times.add((double)estimatedTime);
  System.out.println("Kernel JTP: " + estimatedTime);
  kernel.get(score_vect);
  System.out.println("Execution mode = " + kernel.getExecutionMode());
  return best;
}
