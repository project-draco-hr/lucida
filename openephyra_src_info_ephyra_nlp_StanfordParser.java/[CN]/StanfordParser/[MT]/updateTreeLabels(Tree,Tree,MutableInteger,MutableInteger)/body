{
  if (tree.isLeaf()) {
    leafIndex.value++;
    return;
  }
  String labelValue=tree.label().value().toUpperCase();
  int begin=root.leftCharEdge(tree);
  int end=root.rightCharEdge(tree);
  int length=end - begin;
  begin+=offset.value;
  if (double_quote_lable_pattern.matcher(labelValue).matches() && length > 1) {
    offset.value--;
    log.debug("Quotes label pattern fired: " + offset);
  }
 else   if (bracket_label_pattern.matcher(labelValue).matches()) {
    offset.value-=4;
    log.debug("Bracket label pattern fired: " + offset);
  }
 else   if (tree.isPreTerminal()) {
    Tree leaf=tree.firstChild();
    String text=leaf.label().value();
    Matcher matcher=escaped_char_pattern.matcher(text);
    while (matcher.find()) {
      offset.value--;
    }
  }
  for (  Tree child : tree.children())   updateTreeLabels(root,child,offset,leafIndex);
  end+=offset.value;
  MapLabel label=new MapLabel(tree.label());
  label.put(BEGIN_KEY,begin);
  label.put(END_KEY,end);
  label.put(MapLabel.INDEX_KEY,leafIndex.value);
  tree.setLabel(label);
}
