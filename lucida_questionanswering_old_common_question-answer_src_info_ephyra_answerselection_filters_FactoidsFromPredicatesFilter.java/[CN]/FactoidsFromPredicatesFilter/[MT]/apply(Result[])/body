{
  ArrayList<Result> oldResults=new ArrayList<Result>();
  Hashtable<String,Result> factoids=new Hashtable<String,Result>();
  Hashtable<String,Double> maxScores=new Hashtable<String,Double>();
  for (  Result result : results) {
    Query query=result.getQuery();
    Predicate[] ps=query.getAnalyzedQuestion().getPredicates();
    if (!query.extractWith(ID) || ps.length == 0 || result.getScore() != 0) {
      oldResults.add(result);
      continue;
    }
    Predicate p=result.getPredicate();
    Predicate questionP=p.getSimPredicate();
    double simScore=p.getSimScore();
    Map<String,String[]> nes=result.getNes();
    ArrayList<String> answers=new ArrayList<String>();
    if (nes != null) {
      for (      String ne : nes.keySet())       for (      String arg : p.getArgs())       if (arg.contains(ne)) {
        answers.add(ne);
        break;
      }
    }
 else {
      for (      String missing : questionP.getMissingArgs()) {
        String arg=p.get(missing);
        if (arg != null)         answers.add(arg);
      }
    }
    for (    String answer : answers) {
      String norm=StringUtils.normalize(answer);
      Result factoid=factoids.get(norm);
      if (factoid == null) {
        factoid=new Result(answer,result.getQuery(),result.getDocID());
        factoid.setSentence(result.getSentence());
        factoid.addExtractionTechnique(ID);
        factoids.put(norm,factoid);
        maxScores.put(norm,simScore);
      }
 else       if (simScore > maxScores.get(norm)) {
        factoid.setDocID(result.getDocID());
        maxScores.put(norm,simScore);
      }
      if (nes != null)       for (      String neType : nes.get(answer))       factoid.addNeType(neType);
      factoid.incScore((float)simScore);
    }
  }
  Result[] newResults=factoids.values().toArray(new Result[factoids.size()]);
  Result[] allResults=new Result[oldResults.size() + newResults.length];
  oldResults.toArray(allResults);
  for (int i=0; i < newResults.length; i++)   allResults[oldResults.size() + i]=newResults[i];
  return allResults;
}
