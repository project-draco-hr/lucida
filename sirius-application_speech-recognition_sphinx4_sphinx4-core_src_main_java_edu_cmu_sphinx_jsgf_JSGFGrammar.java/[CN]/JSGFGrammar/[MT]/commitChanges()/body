{
  try {
    if (loadGrammar) {
      if (manager == null)       getGrammarManager();
      ruleGrammar=loadNamedGrammar(grammarName);
      loadImports(ruleGrammar);
      loadGrammar=false;
    }
    manager.linkGrammars();
    ruleStack=new RuleStack();
    newGrammar();
    firstNode=createGrammarNode("<sil>");
    GrammarNode finalNode=createGrammarNode("<sil>");
    finalNode.setFinalNode(true);
    for (    String ruleName : ruleGrammar.getRuleNames()) {
      if (ruleGrammar.isRulePublic(ruleName)) {
        String fullName=getFullRuleName(ruleName);
        GrammarGraph publicRuleGraph=new GrammarGraph();
        ruleStack.push(fullName,publicRuleGraph);
        JSGFRule rule=ruleGrammar.getRule(ruleName);
        GrammarGraph graph=processRule(rule);
        ruleStack.pop();
        firstNode.add(publicRuleGraph.getStartNode(),0.0f);
        publicRuleGraph.getEndNode().add(finalNode,0.0f);
        publicRuleGraph.getStartNode().add(graph.getStartNode(),0.0f);
        graph.getEndNode().add(publicRuleGraph.getEndNode(),0.0f);
      }
    }
    postProcessGrammar();
    if (logger.isLoggable(Level.FINEST)) {
      dumpGrammar();
    }
  }
 catch (  MalformedURLException mue) {
    throw new IOException("bad base grammar URL " + baseURL + ' '+ mue);
  }
}
