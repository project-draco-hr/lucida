{
  Path tempFilePathName=Files.createTempFile("TSimpleFileTransportTest",null);
  Files.delete(tempFilePathName);
  byte[] input_buf=new byte[]{1,2,3,4,5,6,7,8,9,10};
  TSimpleFileTransport trans_write=new TSimpleFileTransport(tempFilePathName.toString(),false,true,false);
  assert(!trans_write.isOpen());
  trans_write.open();
  assert(trans_write.isOpen());
  trans_write.write(input_buf);
  trans_write.write(input_buf,2,2);
  trans_write.flush();
  trans_write.close();
  TSimpleFileTransport trans=new TSimpleFileTransport(tempFilePathName.toString(),true,false);
  assert(trans_write.isOpen());
  assert(0 == trans.getBufferPosition());
  assert(null == trans.getBuffer());
  assert(-1 == trans.getBytesRemainingInBuffer());
  assert(0 == trans.getFilePointer());
  assert(12 == trans.length());
  final int BUFSIZ=4;
  byte[] buf1=new byte[BUFSIZ];
  trans.readAll(buf1,0,BUFSIZ);
  assert(BUFSIZ == trans.getFilePointer());
  assert(Arrays.equals(new byte[]{1,2,3,4},buf1));
  int bytesRead=trans.read(buf1,0,BUFSIZ);
  assert(bytesRead > 0);
  for (int i=0; i < bytesRead; ++i) {
    assert(buf1[i] == i + 5);
  }
  trans.seek(0);
  assert(0 == trans.getFilePointer());
  trans.readAll(buf1,0,BUFSIZ);
  assert(Arrays.equals(new byte[]{1,2,3,4},buf1));
  assert(BUFSIZ == trans.getFilePointer());
  trans.close();
  Files.delete(tempFilePathName);
}
