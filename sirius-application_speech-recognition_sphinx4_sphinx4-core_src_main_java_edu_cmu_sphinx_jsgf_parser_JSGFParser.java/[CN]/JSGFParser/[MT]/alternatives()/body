{
  ArrayList<JSGFRule> ruleList=new ArrayList<JSGFRule>();
  JSGFRule r;
  float w;
  ArrayList<Float> weights=new ArrayList<Float>();
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case GRAMMAR:
case IMPORT:
case PUBLIC:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case STRING_LITERAL:
case IDENTIFIER:
case 28:
case 36:
case 38:
    r=sequence();
  ruleList.add(r);
label_4: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 33:
    ;
  break;
default :
jj_la1[8]=jj_gen;
break label_4;
}
jj_consume_token(33);
r=sequence();
ruleList.add(r);
}
break;
case 34:
w=weight();
r=sequence();
ruleList.add(r);
weights.add(w);
label_5: while (true) {
jj_consume_token(33);
w=weight();
r=sequence();
ruleList.add(r);
weights.add(w);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 33:
;
break;
default :
jj_la1[9]=jj_gen;
break label_5;
}
}
break;
default :
jj_la1[10]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
JSGFRuleAlternatives ra=new JSGFRuleAlternatives(ruleList);
if (weights.size() > 0) {
ra.setWeights(weights);
}
{
if (true) return ra;
}
throw new Error("Missing return statement in function");
}
