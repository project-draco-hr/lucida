{
  super.newProperties(ps);
  logMath=LogMath.getInstance();
  logger=ps.getLogger();
  name=ps.getInstanceName();
  linguist=(Linguist)ps.getComponent(PROP_LINGUIST);
  pruner=(Pruner)ps.getComponent(PROP_PRUNER);
  scorer=(AcousticScorer)ps.getComponent(PROP_SCORER);
  activeListFactory=(ActiveListFactory)ps.getComponent(PROP_ACTIVE_LIST_FACTORY);
  showTokenCount=ps.getBoolean(PROP_SHOW_TOKEN_COUNT);
  double relativeWordBeamWidth=ps.getDouble(PROP_RELATIVE_WORD_BEAM_WIDTH);
  growSkipInterval=ps.getInt(PROP_GROW_SKIP_INTERVAL);
  wantEntryPruning=ps.getBoolean(PROP_WANT_ENTRY_PRUNING);
  logRelativeWordBeamWidth=logMath.linearToLog(relativeWordBeamWidth);
  this.keepAllTokens=true;
}
