{
  FrequencyWarper bark=new FrequencyWarper();
  numDFTPoints=DFTFrequenciesInHz.length;
  this.centerFreqInHz=centerFreqInHz;
  centerFreqInBark=bark.hertzToBark(centerFreqInHz);
  if (centerFreqInHz < DFTFrequenciesInHz[0] || centerFreqInHz > DFTFrequenciesInHz[numDFTPoints - 1]) {
    throw new IllegalArgumentException("Center frequency for PLP filter out of range");
  }
  filterCoefficients=new double[numDFTPoints];
  for (int i=0; i < numDFTPoints; i++) {
    double barkf;
    barkf=bark.hertzToBark(DFTFrequenciesInHz[i]) - centerFreqInBark;
    if (barkf < -2.5)     filterCoefficients[i]=0.0;
 else     if (barkf <= -0.5)     filterCoefficients[i]=Math.pow(10.0,barkf + 0.5);
 else     if (barkf <= 0.5)     filterCoefficients[i]=1.0;
 else     if (barkf <= 1.3)     filterCoefficients[i]=Math.pow(10.0,-2.5 * (barkf - 0.5));
 else     filterCoefficients[i]=0.0;
  }
}
