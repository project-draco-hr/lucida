{
  String unitStr=unit.toString();
  SenoneSequence compositeSenoneSequence;
  compositeSenoneSequence=compositeSenoneSequenceCache.get(unitStr);
  if (logger.isLoggable(Level.FINE))   logger.fine("getCompositeSenoneSequence: " + unit + compositeSenoneSequence == null ? "" : "Cached");
  if (compositeSenoneSequence != null)   return compositeSenoneSequence;
  Context context=unit.getContext();
  List<SenoneSequence> senoneSequenceList;
  senoneSequenceList=new ArrayList<SenoneSequence>();
  for (Iterator<HMM> i=getHMMIterator(); i.hasNext(); ) {
    SenoneHMM hmm=(SenoneHMM)i.next();
    if (hmm.getPosition() == position) {
      Unit hmmUnit=hmm.getUnit();
      if (hmmUnit.isPartialMatch(unit.getName(),context)) {
        if (logger.isLoggable(Level.FINE)) {
          logger.fine("collected: " + hmm.getUnit());
        }
        senoneSequenceList.add(hmm.getSenoneSequence());
      }
    }
  }
  if (senoneSequenceList.isEmpty()) {
    Unit ciUnit=unitManager.getUnit(unit.getName(),unit.isFiller());
    SenoneHMM baseHMM=lookupHMM(ciUnit,HMMPosition.UNDEFINED);
    senoneSequenceList.add(baseHMM.getSenoneSequence());
  }
  int longestSequence=0;
  for (  SenoneSequence ss : senoneSequenceList) {
    if (ss.getSenones().length > longestSequence) {
      longestSequence=ss.getSenones().length;
    }
  }
  List<CompositeSenone> compositeSenones=new ArrayList<CompositeSenone>();
  float logWeight=0.0f;
  for (int i=0; i < longestSequence; i++) {
    Set<Senone> compositeSenoneSet=new HashSet<Senone>();
    for (    SenoneSequence senoneSequence : senoneSequenceList) {
      if (i < senoneSequence.getSenones().length) {
        Senone senone=senoneSequence.getSenones()[i];
        compositeSenoneSet.add(senone);
      }
    }
    compositeSenones.add(CompositeSenone.create(compositeSenoneSet,logWeight));
  }
  compositeSenoneSequence=SenoneSequence.create(compositeSenones);
  compositeSenoneSequenceCache.put(unit.toString(),compositeSenoneSequence);
  if (logger.isLoggable(Level.FINE)) {
    logger.fine(unit + " consists of " + compositeSenones.size()+ " composite senones");
    if (logger.isLoggable(Level.FINEST)) {
      compositeSenoneSequence.dump("am");
    }
  }
  return compositeSenoneSequence;
}
