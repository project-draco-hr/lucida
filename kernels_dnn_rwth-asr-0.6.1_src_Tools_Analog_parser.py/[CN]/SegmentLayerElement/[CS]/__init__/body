def __init__(self, name, handler):
    super(SegmentLayerElement, self).__init__(name)
    self.flattenUnknownElements()
    self.handler = handler
    self.addChild(OrthElement('recognized', (lambda orth: self.addData('recognized', orth))))
    self.addChild(TracebackElement((lambda traceback: self.addData('traceback', traceback))))
    self.addChild(ObsoleteEditDistanceAlignmentElement('word errors', (lambda alignment: self.addData('edit distance alignment', alignment))))
    self.addChild(ObsoleteEditDistanceStatisticsElement('word errors', (lambda counts: self.addData('word errors', counts))))
    self.addChild(ObsoleteEditDistanceStatisticsElement('lattice word errors', (lambda counts: self.addData('lattice word errors', counts))))
    self.addChild(EvaluationElement(self.addEvaluationData))
    self.addChild(XmlDataOnlyElement('word-lattice-density', (lambda atts, cdata: self.addData('lattice density', float((cdata if ((cdata != '-nan') and (cdata != 'inf')) else 0))))))
    self.addChild(TimerElement((lambda seconds: self.addData('user time', seconds))))
    self.addChild(XmlDataOnlyElement('real-time', (lambda atts, cdata: self.addData('real time', float(cdata)))))
    self.addChild(StatisticContainerElement('search-space-statistics', (lambda statistics: self.addData('search-space-statistics', statistics)), ['states before pruning', 'states after pruning', 'trees before pruning', 'trees after pruning', 'ending words before pruning', 'ending words after pruning', 'ending words after 2nd pruning', 'ending words after recombi', 'hmm states before pruning', 'hmm states after pruning', 'active network states before pruning', 'active network states after pruning', 'active network arcs before pruning', 'active network arcs after pruning']))
