{
  String[] tokens=lemma.split(" ");
  Set<String> lookupSet=new HashSet<String>();
  for (  String token : tokens)   if (token.length() > 1 && !FunctionWords.lookup(token))   lookupSet.add(token);
  if (lookupSet.size() == 0)   return 0;
  tokens=this.lemma.split(" ");
  Set<String> tokenSet=new HashSet<String>();
  for (  String token : tokens)   if (token.length() > 1 && !FunctionWords.lookup(token))   tokenSet.add(token);
  double intersect=0;
  int union=lookupSet.size();
  for (  String token : tokenSet)   if (lookupSet.contains(token))   intersect++;
 else   union++;
  double simScore=intersect / union;
  for (  String expansionLemma : expansionLemmas.keySet()) {
    tokens=expansionLemma.split(" ");
    tokenSet.clear();
    for (    String token : tokens)     if (token.length() > 1 && !FunctionWords.lookup(token))     tokenSet.add(token);
    double weight=expansionLemmas.get(expansionLemma);
    intersect=0;
    union=lookupSet.size();
    for (    String token : tokenSet)     if (lookupSet.contains(token))     intersect++;
 else     union++;
    simScore=Math.max(simScore,weight * (intersect / union));
  }
  return simScore;
}
