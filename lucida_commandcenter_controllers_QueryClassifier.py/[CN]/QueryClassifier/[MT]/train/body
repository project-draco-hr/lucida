def train(self, input_type, query_classes):
    current_dir = os.path.abspath(os.path.dirname(__file__))
    if (len(query_classes) <= 1):
        return DummyClassifier(query_classes.keys()[0])
    data = DataFrame({'text': [], 'class': [], })
    for query_class_name in query_classes:
        path = (((current_dir + '/../data/') + query_class_name) + '.txt')
        log(('Opening ' + path))
        lines = [line.rstrip('\n') for line in open(path)]
        rows = []
        index = []
        for text in lines:
            if (text in index):
                log(((('duplicate in ' + path) + ': ') + text))
                exit(1)
            rows.append({'text': text, 'class': query_class_name, })
            index.append(text)
        data = data.append(DataFrame(rows, index))
    pipeline = Pipeline([('count_vectorizer', CountVectorizer(ngram_range=(1, 2))), ('classifier', LinearSVC())])
    data = data.reindex(numpy.random.permutation(data.index))
    k_fold = KFold(n=len(data), n_folds=6)
    scores = []
    for (train_indices, test_indices) in k_fold:
        train_text = data.iloc[train_indices]['text'].values
        train_y = data.iloc[train_indices]['class'].values.astype(str)
        test_text = data.iloc[test_indices]['text'].values
        test_y = data.iloc[test_indices]['class'].values.astype(str)
        pipeline.fit(train_text, train_y)
        predictions = pipeline.predict(test_text)
        score = f1_score(test_y, predictions, pos_label=(None if (len(query_classes) == 2) else 1), average='weighted')
        scores.append(score)
    log((('********************** ' + input_type) + ' **********************'))
    log(('Total documents classified:' + str(len(data))))
    log(('Score:' + str((sum(scores) / len(scores)))))
    if (not os.path.exists((current_dir + '/../models'))):
        os.makedirs((current_dir + '/../models'))
    with open((((current_dir + '/../models/dumped_classifier_') + input_type) + '.pkl'), 'wb') as fid:
        log(('Saving model for ' + input_type))
        cPickle.dump(pipeline, fid)
    return pipeline
