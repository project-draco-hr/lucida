{
  try {
    AudioDataInputStream is=new AudioDataInputStream(audio);
    dataSource.setInputStream(is);
    ArrayList<float[]> intensitiesList=new ArrayList<float[]>();
    float maxIntensity[]=new float[100];
    Arrays.fill(maxIntensity,Float.MIN_VALUE);
    Data spectrum=frontEnd.getData();
    while (!(spectrum instanceof DataEndSignal)) {
      if (spectrum instanceof FloatData) {
        float[] spectrumData=((FloatData)spectrum).getValues();
        float[] intensities=new float[spectrumData.length];
        for (int i=0; i < intensities.length; i++) {
          intensities[i]=spectrumData[i];
          if (Math.abs(intensities[i]) > maxIntensity[i]) {
            maxIntensity[i]=Math.abs(intensities[i]);
          }
        }
        intensitiesList.add(intensities);
      }
      if (spectrum instanceof DoubleData) {
        double[] spectrumData=((DoubleData)spectrum).getValues();
        float[] intensities=new float[spectrumData.length];
        for (int i=0; i < intensities.length; i++) {
          intensities[i]=(float)spectrumData[i];
          if (Math.abs(intensities[i]) > maxIntensity[i]) {
            maxIntensity[i]=Math.abs(intensities[i]);
          }
        }
        intensitiesList.add(intensities);
      }
      spectrum=frontEnd.getData();
    }
    is.close();
    int width=intensitiesList.size();
    int ncep=intensitiesList.get(0).length;
    int height=ncep * HSCALE;
    Dimension d=new Dimension(width,height);
    setMinimumSize(d);
    setMaximumSize(d);
    setPreferredSize(d);
    spectrogram=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
    for (int i=0; i < width; i++) {
      float[] intensities=intensitiesList.get(i);
      for (int j=ncep - 1; j >= 0; j--) {
        int grey=0x7f - (int)(intensities[j] / maxIntensity[j] * 0x7f);
        int pixel=((grey << 16) & 0xff0000) | ((grey << 8) & 0xff00) | (grey & 0xff);
        for (int k=0; k < HSCALE; k++)         spectrogram.setRGB(i,height - 1 - j * HSCALE - k,pixel);
      }
    }
    ImageFilter scaleFilter=new ReplicateScaleFilter((int)(zoom * width),height);
    scaledSpectrogram=createImage(new FilteredImageSource(spectrogram.getSource(),scaleFilter));
    Dimension sz=getSize();
    repaint(0,0,0,sz.width - 1,sz.height - 1);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
