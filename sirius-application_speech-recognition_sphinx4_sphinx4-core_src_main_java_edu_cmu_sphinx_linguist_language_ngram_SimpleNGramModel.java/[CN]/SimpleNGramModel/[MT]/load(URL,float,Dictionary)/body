{
  String line;
  float logUnigramWeight=logMath.linearToLog(unigramWeight);
  float inverseLogUnigramWeight=logMath.linearToLog(1.0 - unigramWeight);
  open(location);
  readUntil("\\data\\");
  List<Integer> ngramList=new ArrayList<Integer>();
  while ((line=readLine()) != null) {
    if (line.startsWith("ngram")) {
      StringTokenizer st=new StringTokenizer(line," \t\n\r\f=");
      if (st.countTokens() != 3) {
        corrupt("corrupt ngram field " + line + ' '+ st.countTokens());
      }
      st.nextToken();
      int index=Integer.parseInt(st.nextToken());
      int count=Integer.parseInt(st.nextToken());
      ngramList.add(index - 1,count);
      if (index > maxNGram) {
        maxNGram=index;
      }
    }
 else     if (line.equals("\\1-grams:")) {
      break;
    }
  }
  int numUnigrams=ngramList.get(0) - 1;
  float logUniformProbability=-logMath.linearToLog(numUnigrams);
  for (int index=0; index < ngramList.size(); index++) {
    int ngram=index + 1;
    int ngramCount=ngramList.get(index);
    for (int i=0; i < ngramCount; i++) {
      StringTokenizer tok=new StringTokenizer(readLine());
      int tokenCount=tok.countTokens();
      if (tokenCount != ngram + 1 && tokenCount != ngram + 2) {
        corrupt("Bad format");
      }
      float log10Prob=Float.parseFloat(tok.nextToken());
      float log10Backoff=0.0f;
      List<Word> wordList=new ArrayList<Word>(maxNGram);
      for (int j=0; j < ngram; j++) {
        String word=tok.nextToken();
        vocabulary.add(word);
        Word wordObject=dictionary.getWord(word);
        if (wordObject == null) {
          wordObject=Word.UNKNOWN;
        }
        wordList.add(wordObject);
      }
      WordSequence wordSequence=new WordSequence(wordList);
      if (tok.hasMoreTokens()) {
        log10Backoff=Float.parseFloat(tok.nextToken());
      }
      float logProb=logMath.log10ToLog(log10Prob);
      float logBackoff=logMath.log10ToLog(log10Backoff);
      if (ngram == 1) {
        float p1=logProb + logUnigramWeight;
        float p2=logUniformProbability + inverseLogUnigramWeight;
        logProb=logMath.addAsLinear(p1,p2);
      }
      put(wordSequence,logProb,logBackoff);
    }
    if (index < ngramList.size() - 1) {
      String next="\\" + (ngram + 1) + "-grams:";
      readUntil(next);
    }
  }
  readUntil("\\end\\");
  close();
}
