{
  List<AnswerType> atypes=new ArrayList<AnswerType>();
  try {
    atypes=qc.getAnswerTypes(question);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  Set<AnswerType> remove=new HashSet<AnswerType>();
  for (  AnswerType atype : atypes) {
    if (atype.getFullType(-1).equals("NONE")) {
      remove.add(atype);
    }
  }
  for (  AnswerType atype : remove) {
    atypes.remove(atype);
  }
  String[] res=new String[atypes.size()];
  for (int i=0; i < atypes.size(); i++) {
    String atype=atypes.get(i).getFullType(-1).toLowerCase().replaceAll("\\.","->NE").replaceAll("^","NE");
    StringBuilder sb=new StringBuilder(atype);
    Matcher m=Pattern.compile("_(\\w)").matcher(atype);
    while (m.find()) {
      sb.replace(m.start(),m.end(),m.group(1).toUpperCase());
      m=Pattern.compile("_(\\w)").matcher(sb.toString());
    }
    res[i]=sb.toString();
  }
  return res;
}
