{
  MsgPrinter.printStatusMsg("@@@@@ Infer; User: " + LUCID);
  String answer="";
  try {
    infer_lock.lock();
    System.setProperty("INDRI_INDEX",KnowledgeBase.getKnowledgeBase(LUCID).getIndriIndex());
    if (query.content.isEmpty() || query.content.get(0).data.isEmpty()) {
      throw new IllegalArgumentException();
    }
    answer=askFactoidThrift(LUCID,query.content.get(0).data.get(0));
    MsgPrinter.printStatusMsg("Answer: " + answer);
    if (answer.equals(default_answer) && query.content.get(0).tags.get(2).equals("1")) {
      QuerySpec ENSEMBLE_spec=new QuerySpec();
      ENSEMBLE_spec.name="query";
      ENSEMBLE_spec.content=new ArrayList<QueryInput>();
      ENSEMBLE_spec.content.add(query.content.get(1));
      String ENSEMBLE_addr=query.content.get(1).tags.get(0);
      int ENSEMBLE_port=Integer.parseInt(query.content.get(1).tags.get(1));
      TTransport transport=new TSocket(ENSEMBLE_addr,ENSEMBLE_port);
      TProtocol protocol=new TBinaryProtocol(new TFramedTransport(transport));
      LucidaService.Client client=new LucidaService.Client(protocol);
      MsgPrinter.printStatusMsg("Asking ENSEMBLE at " + ENSEMBLE_addr + " "+ ENSEMBLE_port);
      answer=client.infer(LUCID,ENSEMBLE_spec);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException((e.toString() != null) ? e.toString() : "");
  }
 finally {
    infer_lock.unlock();
  }
  return answer;
}
