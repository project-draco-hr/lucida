{
  ExtendedStreamTokenizer tok=new ExtendedStreamTokenizer(path,true);
  GrammarNode initialNode=createGrammarNode("<sil>");
  GrammarNode branchNode=createGrammarNode(false);
  GrammarNode finalNode=createGrammarNode("<sil>");
  finalNode.setFinalNode(true);
  List<GrammarNode> wordGrammarNodes=new LinkedList<GrammarNode>();
  while (!tok.isEOF()) {
    String word;
    while ((word=tok.getString()) != null) {
      word=word.toLowerCase();
      GrammarNode wordNode=createGrammarNode(word);
      wordGrammarNodes.add(wordNode);
    }
  }
  initialNode.add(branchNode,LogMath.LOG_ONE);
  float branchScore=logMath.linearToLog(1.0 / wordGrammarNodes.size());
  for (  GrammarNode wordNode : wordGrammarNodes) {
    branchNode.add(wordNode,branchScore);
    wordNode.add(finalNode,LogMath.LOG_ONE);
    if (isLooping) {
      wordNode.add(branchNode,LogMath.LOG_ONE);
    }
  }
  return initialNode;
}
