{
  List<String> patterns=new ArrayList<String>();
  Map<String,Map<String,Double>> expansionsMap=new Hashtable<String,Map<String,Double>>();
  for (  Term term : terms) {
    Map<String,Double> expansions=term.getExpansions();
    if (expansions.size() > 0) {
      String pattern="\\b" + term.getText() + "\\b";
      patterns.add(pattern);
      expansionsMap.put(pattern,expansions);
    }
  }
  Map<String,Double> phraseExps=new Hashtable<String,Double>();
  phraseExps.put(phrase,1d);
  while (patterns.size() > 0) {
    String[] phrases=phraseExps.keySet().toArray(new String[phraseExps.size()]);
    String pattern=patterns.get(0);
    Map<String,Double> expansions=expansionsMap.get(pattern);
    for (    String phraseExp : phrases) {
      Matcher m=Pattern.compile(".*?" + pattern + ".*+").matcher(phraseExp);
      if (m.matches()) {
        for (        String expansion : expansions.keySet()) {
          String expanded=phraseExp.replaceFirst(pattern,expansion);
          Double weight=phraseExps.get(phraseExp) * expansions.get(expansion);
          phraseExps.put(expanded,weight);
        }
      }
 else {
        patterns.remove(0);
        break;
      }
    }
  }
  phraseExps.remove(phrase);
  cutOffExpansions(phraseExps,true);
  return phraseExps;
}
