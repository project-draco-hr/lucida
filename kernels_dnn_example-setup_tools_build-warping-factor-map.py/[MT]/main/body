def main(options):
    alphas = ElementTree()
    try:
        alphas = alphas.parse(options.alphas).text
    except:
        raise Exception("Can't parse the file with warping factors!")
    alphas = alphas.strip().split()
    weights = {}
    tagname = 'corpus-key-to-score-accumulator-map/score-accumulator'
    for a in alphas:
        scores = ElementTree()
        filename = ('%s/%s%s' % (options.prefix, a, options.suffix))
        try:
            scores.parse(filename)
            for s in scores.findall(tagname):
                seg = s.attrib['corpus-key']
                score = float(s.find('weighted-sum-of-scores').text)
                if (seg in weights):
                    if (score < weights[seg][0]):
                        weights[seg] = (score, a)
                else:
                    weights[seg] = (score, a)
        except:
            raise Exception(("Can't parse log file '%s'!" % filename))
    seen_alphas = defaultdict(int)
    try:
        m = open(options.warping_map, 'w')
        m.write("<?xml version='1.0' encoding='utf-8'?>\n")
        m.write('<coprus-key-map>\n')
        for seg in sorted(weights.keys()):
            a = weights[seg][1]
            m.write(("  <map-item key='%s' value='%s'/>\n" % (seg, a)))
            seen_alphas[a] += 1
        m.write('</coprus-key-map>\n')
        m.close()
    except:
        raise Exception(("Failed writing the map to '%s'!" % options.warping_map))
    try:
        m = open(options.reduced_alphas, 'w')
        m.write("<?xml version='1.0' encoding='utf-8'?>\n")
        m.write('<vector-string>\n')
        for a in sorted(seen_alphas.keys()):
            m.write(('\t%s\n' % a))
        m.write('</vector-string>\n')
        m.close()
    except:
        raise Exception(("Failed writing the reduced list to '%s'!" % options.reduced_alphas))
