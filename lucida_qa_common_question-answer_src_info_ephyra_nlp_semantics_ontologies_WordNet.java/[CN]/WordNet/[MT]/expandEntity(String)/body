{
  if (!isCompoundNoun(entity))   return new Hashtable<String,Double>();
  Map<Synset,Double> synsets=new Hashtable<Synset,Double>();
  Map<Synset,Double> expanded=new Hashtable<Synset,Double>();
  double hurdle=TermExpander.MIN_EXPANSION_WEIGHT;
  if (SYNONYM_WEIGHT >= hurdle) {
    Synset synset=getCommonSynset(entity,NOUN);
    if (synset != null)     synsets.put(synset,1d);
  }
  int pathLength=0;
  while (pathLength++ < MAX_PATH_LENGTH && synsets.size() > 0) {
    Synset[] currSynsets=synsets.keySet().toArray(new Synset[synsets.size()]);
    double[] currWeights=new double[synsets.size()];
    for (int i=0; i < synsets.size(); i++)     currWeights[i]=synsets.get(currSynsets[i]);
    for (int i=0; i < currSynsets.length; i++) {
      Synset synset=currSynsets[i];
      double weight=currWeights[i];
      if (synsets.get(synset) == weight)       synsets.remove(synset);
      if (!expanded.containsKey(synset) || expanded.get(synset) < weight) {
        expanded.put(synset,weight);
      }
 else       continue;
      double hypernymWeight=weight * HYPERNYM_WEIGHT;
      if (hypernymWeight >= hurdle) {
        Synset[] hypernyms=getHypernymSynsets(synset);
        for (        Synset hypernym : hypernyms)         if (!synsets.containsKey(hypernym) || synsets.get(hypernym) < hypernymWeight)         synsets.put(hypernym,hypernymWeight);
      }
      double hyponymWeight=weight * HYPONYM_WEIGHT;
      if (hyponymWeight >= hurdle) {
        Synset[] hyponyms=getHyponymSynsets(synset);
        for (        Synset hyponym : hyponyms)         if (!synsets.containsKey(hyponym) || synsets.get(hyponym) < hyponymWeight)         synsets.put(hyponym,hyponymWeight);
      }
      double memberOfWeight=weight * MEMBER_OF_WEIGHT;
      if (memberOfWeight >= hurdle) {
        Synset[] membersOf=getMemberOfSynsets(synset);
        for (        Synset memberOf : membersOf)         if (!synsets.containsKey(memberOf) || synsets.get(memberOf) < memberOfWeight)         synsets.put(memberOf,memberOfWeight);
      }
      double substanceOfWeight=weight * SUBSTANCE_OF_WEIGHT;
      if (substanceOfWeight >= hurdle) {
        Synset[] substancesOf=getSubstanceOfSynsets(synset);
        for (        Synset substanceOf : substancesOf)         if (!synsets.containsKey(substanceOf) || synsets.get(substanceOf) < substanceOfWeight)         synsets.put(substanceOf,substanceOfWeight);
      }
      double partOfWeight=weight * PART_OF_WEIGHT;
      if (partOfWeight >= hurdle) {
        Synset[] partsOf=getPartOfSynsets(synset);
        for (        Synset partOf : partsOf)         if (!synsets.containsKey(partOf) || synsets.get(partOf) < partOfWeight)         synsets.put(partOf,partOfWeight);
      }
      double hasMemberWeight=weight * HAS_MEMBER_WEIGHT;
      if (hasMemberWeight >= hurdle) {
        Synset[] haveMember=getHasMemberSynsets(synset);
        for (        Synset hasMember : haveMember)         if (!synsets.containsKey(hasMember) || synsets.get(hasMember) < hasMemberWeight)         synsets.put(hasMember,hasMemberWeight);
      }
      double hasSubstanceWeight=weight * HAS_SUBSTANCE_WEIGHT;
      if (hasSubstanceWeight >= hurdle) {
        Synset[] haveSubstance=getHasSubstanceSynsets(synset);
        for (        Synset hasSubstance : haveSubstance)         if (!synsets.containsKey(hasSubstance) || synsets.get(hasSubstance) < hasSubstanceWeight)         synsets.put(hasSubstance,hasSubstanceWeight);
      }
      double hasPartWeight=weight * HAS_PART_WEIGHT;
      if (hasPartWeight >= hurdle) {
        Synset[] havePart=getHasPartSynsets(synset);
        for (        Synset hasPart : havePart)         if (!synsets.containsKey(hasPart) || synsets.get(hasPart) < hasPartWeight)         synsets.put(hasPart,hasPartWeight);
      }
    }
  }
  for (  Synset synset : synsets.keySet()) {
    double weight=synsets.get(synset);
    if (!expanded.containsKey(synset) || expanded.get(synset) < weight)     expanded.put(synset,weight);
  }
  Map<String,Double> expansions=new Hashtable<String,Double>();
  for (  Synset synset : expanded.keySet()) {
    double weight=expanded.get(synset);
    if (weight == 1)     weight=SYNONYM_WEIGHT;
    for (    String expansion : getLemmas(synset))     if (!expansions.containsKey(expansion) || expansions.get(expansion) < weight)     expansions.put(expansion,weight);
  }
  List<String> dropped=new ArrayList<String>();
  for (  String expansion : expansions.keySet())   if (expansion.equalsIgnoreCase(entity))   dropped.add(expansion);
  for (  String expansion : dropped)   expansions.remove(expansion);
  return expansions;
}
