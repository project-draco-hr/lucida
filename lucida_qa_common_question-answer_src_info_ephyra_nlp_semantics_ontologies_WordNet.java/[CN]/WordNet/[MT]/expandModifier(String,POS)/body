{
  if ((pos.equals(ADJECTIVE) && !isAdjective(modifier)) || (pos.equals(ADVERB) && !isAdverb(modifier)))   return new Hashtable<String,Double>();
  Map<Synset,Double> synsets=new Hashtable<Synset,Double>();
  Map<Synset,Double> expanded=new Hashtable<Synset,Double>();
  double hurdle=TermExpander.MIN_EXPANSION_WEIGHT;
  if (SYNONYM_WEIGHT >= hurdle) {
    Synset synset=getCommonSynset(modifier,pos);
    if (synset != null)     synsets.put(synset,1d);
  }
  int pathLength=0;
  while (pathLength++ < MAX_PATH_LENGTH && synsets.size() > 0) {
    Synset[] currSynsets=synsets.keySet().toArray(new Synset[synsets.size()]);
    double[] currWeights=new double[synsets.size()];
    for (int i=0; i < synsets.size(); i++)     currWeights[i]=synsets.get(currSynsets[i]);
    for (int i=0; i < currSynsets.length; i++) {
      Synset synset=currSynsets[i];
      double weight=currWeights[i];
      if (synsets.get(synset) == weight)       synsets.remove(synset);
      if (!expanded.containsKey(synset) || expanded.get(synset) < weight) {
        expanded.put(synset,weight);
      }
 else       continue;
    }
  }
  for (  Synset synset : synsets.keySet()) {
    double weight=synsets.get(synset);
    if (!expanded.containsKey(synset) || expanded.get(synset) < weight)     expanded.put(synset,weight);
  }
  Map<String,Double> expansions=new Hashtable<String,Double>();
  for (  Synset synset : expanded.keySet()) {
    double weight=expanded.get(synset);
    if (weight == 1)     weight=SYNONYM_WEIGHT;
    for (    String expansion : getLemmas(synset))     if (!expansions.containsKey(expansion) || expansions.get(expansion) < weight)     expansions.put(expansion,weight);
  }
  List<String> dropped=new ArrayList<String>();
  for (  String expansion : expansions.keySet())   if (expansion.equalsIgnoreCase(modifier))   dropped.add(expansion);
  for (  String expansion : dropped)   expansions.remove(expansion);
  return expansions;
}
