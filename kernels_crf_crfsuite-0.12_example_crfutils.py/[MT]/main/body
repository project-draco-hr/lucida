def main(feature_extractor, fields='w pos y', sep=' '):
    fi = sys.stdin
    fo = sys.stdout
    parser = optparse.OptionParser(usage='usage: %prog [options]\nThis utility reads a data set from STDIN, and outputs attributes to STDOUT.\nEach line of a data set must consist of field values separated by SEPARATOR\ncharacters. The names and order of field values can be specified by -f option.\nThe separator character can be specified with -s option. Instead of outputting\nattributes, this utility tags the input data when a model file is specified by\n-t option (CRFsuite Python module must be installed).')
    parser.add_option('-t', dest='model', help='tag the input using the model (requires "crfsuite" module)')
    parser.add_option('-f', dest='fields', default=fields, help='specify field names of input data [default: "%default"]')
    parser.add_option('-s', dest='separator', default=sep, help='specify the separator of columns of input data [default: "%default"]')
    (options, args) = parser.parse_args()
    F = options.fields.split(' ')
    if (not options.model):
        for X in readiter(fi, F, options.separator):
            feature_extractor(X)
            output_features(fo, X, 'y')
    else:
        import crfsuite
        tagger = crfsuite.Tagger()
        tagger.open(options.model)
        for X in readiter(fi, F, options.separator):
            feature_extractor(X)
            xseq = to_crfsuite(X)
            yseq = tagger.tag(xseq)
            for t in range(len(X)):
                v = X[t]
                fo.write('\t'.join([v[f] for f in F]))
                fo.write(('\t%s\n' % yseq[t]))
            fo.write('\n')
