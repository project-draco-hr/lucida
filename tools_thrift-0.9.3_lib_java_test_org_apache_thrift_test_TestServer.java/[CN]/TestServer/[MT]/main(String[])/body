{
  try {
    int port=9090;
    boolean ssl=false;
    String transport_type="buffered";
    String protocol_type="binary";
    String server_type="thread-pool";
    String domain_socket="";
    try {
      for (int i=0; i < args.length; i++) {
        if (args[i].startsWith("--port")) {
          port=Integer.valueOf(args[i].split("=")[1]);
        }
 else         if (args[i].startsWith("--server-type")) {
          server_type=args[i].split("=")[1];
          server_type.trim();
        }
 else         if (args[i].startsWith("--port")) {
          port=Integer.parseInt(args[i].split("=")[1]);
        }
 else         if (args[i].startsWith("--protocol")) {
          protocol_type=args[i].split("=")[1];
          protocol_type.trim();
        }
 else         if (args[i].startsWith("--transport")) {
          transport_type=args[i].split("=")[1];
          transport_type.trim();
        }
 else         if (args[i].equals("--ssl")) {
          ssl=true;
        }
 else         if (args[i].equals("--help")) {
          System.out.println("Allowed options:");
          System.out.println("  --help\t\t\tProduce help message");
          System.out.println("  --port=arg (=" + port + ")\tPort number to connect");
          System.out.println("  --transport=arg (=" + transport_type + ")\n\t\t\t\tTransport: buffered, framed, fastframed");
          System.out.println("  --protocol=arg (=" + protocol_type + ")\tProtocol: binary, json, compact");
          System.out.println("  --ssl\t\t\tEncrypted Transport using SSL");
          System.out.println("  --server-type=arg (=" + server_type + ")\n\t\t\t\tType of server: simple, thread-pool, nonblocking, threaded-selector");
          System.exit(0);
        }
      }
    }
 catch (    Exception e) {
      System.err.println("Can not parse arguments! See --help");
      System.exit(1);
    }
    try {
      if (server_type.equals("simple")) {
      }
 else       if (server_type.equals("thread-pool")) {
      }
 else       if (server_type.equals("nonblocking")) {
        if (ssl == true) {
          throw new Exception("SSL is not supported over nonblocking servers!");
        }
      }
 else       if (server_type.equals("threaded-selector")) {
        if (ssl == true) {
          throw new Exception("SSL is not supported over nonblocking servers!");
        }
      }
 else {
        throw new Exception("Unknown server type! " + server_type);
      }
      if (protocol_type.equals("binary")) {
      }
 else       if (protocol_type.equals("json")) {
      }
 else       if (protocol_type.equals("compact")) {
      }
 else {
        throw new Exception("Unknown protocol type! " + protocol_type);
      }
      if (transport_type.equals("buffered")) {
      }
 else       if (transport_type.equals("framed")) {
      }
 else       if (transport_type.equals("fastframed")) {
      }
 else {
        throw new Exception("Unknown transport type! " + transport_type);
      }
    }
 catch (    Exception e) {
      System.err.println("Error: " + e.getMessage());
      System.exit(1);
    }
    TestHandler testHandler=new TestHandler();
    ThriftTest.Processor testProcessor=new ThriftTest.Processor(testHandler);
    TProtocolFactory tProtocolFactory=null;
    if (protocol_type.equals("json")) {
      tProtocolFactory=new TJSONProtocol.Factory();
    }
 else     if (protocol_type.equals("compact")) {
      tProtocolFactory=new TCompactProtocol.Factory();
    }
 else {
      tProtocolFactory=new TBinaryProtocol.Factory();
    }
    TTransportFactory tTransportFactory=null;
    if (transport_type.equals("framed")) {
      tTransportFactory=new TFramedTransport.Factory();
    }
 else     if (transport_type.equals("fastframed")) {
      tTransportFactory=new TFastFramedTransport.Factory();
    }
 else {
      tTransportFactory=new TTransportFactory();
    }
    TServer serverEngine=null;
    if (server_type.equals("nonblocking") || server_type.equals("threaded-selector")) {
      TNonblockingServerSocket tNonblockingServerSocket=new TNonblockingServerSocket(new TNonblockingServerSocket.NonblockingAbstractServerSocketArgs().port(port));
      if (server_type.equals("nonblocking")) {
        TNonblockingServer.Args tNonblockingServerArgs=new TNonblockingServer.Args(tNonblockingServerSocket);
        tNonblockingServerArgs.processor(testProcessor);
        tNonblockingServerArgs.protocolFactory(tProtocolFactory);
        tNonblockingServerArgs.transportFactory(tTransportFactory);
        serverEngine=new TNonblockingServer(tNonblockingServerArgs);
      }
 else {
        TThreadedSelectorServer.Args tThreadedSelectorServerArgs=new TThreadedSelectorServer.Args(tNonblockingServerSocket);
        tThreadedSelectorServerArgs.processor(testProcessor);
        tThreadedSelectorServerArgs.protocolFactory(tProtocolFactory);
        tThreadedSelectorServerArgs.transportFactory(tTransportFactory);
        serverEngine=new TThreadedSelectorServer(tThreadedSelectorServerArgs);
      }
    }
 else {
      TServerSocket tServerSocket=null;
      if (ssl) {
        tServerSocket=TSSLTransportFactory.getServerSocket(port,0);
      }
 else {
        tServerSocket=new TServerSocket(new TServerSocket.ServerSocketTransportArgs().port(port));
      }
      if (server_type.equals("simple")) {
        TServer.Args tServerArgs=new TServer.Args(tServerSocket);
        tServerArgs.processor(testProcessor);
        tServerArgs.protocolFactory(tProtocolFactory);
        tServerArgs.transportFactory(tTransportFactory);
        serverEngine=new TSimpleServer(tServerArgs);
      }
 else {
        TThreadPoolServer.Args tThreadPoolServerArgs=new TThreadPoolServer.Args(tServerSocket);
        tThreadPoolServerArgs.processor(testProcessor);
        tThreadPoolServerArgs.protocolFactory(tProtocolFactory);
        tThreadPoolServerArgs.transportFactory(tTransportFactory);
        serverEngine=new TThreadPoolServer(tThreadPoolServerArgs);
      }
    }
    serverEngine.setServerEventHandler(new TestServerEventHandler());
    System.out.println("Starting the server on port " + port + "...");
    serverEngine.serve();
  }
 catch (  Exception x) {
    x.printStackTrace();
  }
  System.out.println("done.");
}
