{
  if (LoadedModel == false) {
    LoadedModel=true;
    max_senone_size=Sphinx3Loader.senonePool.size();
    GaussianMixture gm_tmp=(GaussianMixture)Sphinx3Loader.senonePool.get(0);
    comp_size=(int)(gm_tmp).getMixtureComponents().length;
    means_size=gm_tmp.getMixtureComponents()[0].getMeanTransformed().length;
    score_vect=new float[max_senone_size];
    means_array_size=max_senone_size * comp_size * means_size;
    comp_array_size=max_senone_size * comp_size;
    meansArray=new float[means_array_size];
    precsArray=new float[means_array_size];
    mixWeightArray=new float[comp_array_size];
    preFactorArray=new float[comp_array_size];
    int idx=0;
    int idx2=0;
    for (int i=0; i < max_senone_size; i++) {
      GaussianMixture gm=(GaussianMixture)Sphinx3Loader.senonePool.get(i);
      float[] weights=gm.getLogMixtureWeights();
      for (int j=0; j < comp_size; j++) {
        float[] means=gm.getMixtureComponents()[j].getMeanTransformed();
        float[] precs=gm.getMixtureComponents()[j].getPrecisionTransformed();
        mixWeightArray[idx2]=weights[j];
        preFactorArray[idx2]=gm.getMixtureComponents()[j].getLogPreComputedGaussianFactor();
        idx2=idx2 + 1;
        for (int k=0; k < means_size; k++) {
          meansArray[idx]=means[k];
          precsArray[idx]=precs[k];
          idx=idx + 1;
        }
      }
    }
    kernel=new Kernel(){
      @Override public void run(){
        int id=getGlobalId();
        computeScore2(id);
      }
    }
;
    kernel.setExplicit(true);
    kernel.put(score_vect);
    kernel.put(mixWeightArray);
    kernel.put(preFactorArray);
    kernel.put(meansArray);
    kernel.put(precsArray);
  }
}
