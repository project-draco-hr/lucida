def received_message(self, m):
    logger.debug(('%s: Got message from server of type %s' % (self.request_id, str(type(m)))))
    if (self.state == self.__class__.STATE_CONNECTED):
        props = json.loads(str(m))
        content_type = props['content_type']
        self.request_id = props['id']
        self.num_segments = 0
        self.decoder_pipeline.init_request(self.request_id, content_type)
        self.last_decoder_message = time.time()
        thread.start_new_thread(self.guard_timeout, ())
        logger.info(('%s: Started timeout guard' % self.request_id))
        logger.info(('%s: Initialized request' % self.request_id))
        self.state = self.STATE_INITIALIZED
    elif (m.data == 'EOS'):
        if ((self.state != self.STATE_CANCELLING) and (self.state != self.STATE_EOS_RECEIVED) and (self.state != self.STATE_FINISHED)):
            self.decoder_pipeline.end_request()
            self.state = self.STATE_EOS_RECEIVED
        else:
            logger.info(('%s: Ignoring EOS, worker already in state %d' % (self.request_id, self.state)))
    elif ((self.state != self.STATE_CANCELLING) and (self.state != self.STATE_EOS_RECEIVED) and (self.state != self.STATE_FINISHED)):
        if isinstance(m, ws4py.messaging.BinaryMessage):
            self.decoder_pipeline.process_data(m.data)
            self.state = self.STATE_PROCESSING
        elif isinstance(m, ws4py.messaging.TextMessage):
            props = json.loads(str(m))
            if ('adaptation_state' in props):
                as_props = props['adaptation_state']
                if (as_props.get('type', '') == 'string+gzip+base64'):
                    adaptation_state = zlib.decompress(base64.b64decode(as_props.get('value', '')))
                    logger.info(('%s: Setting adaptation state to user-provided value' % self.request_id))
                    self.decoder_pipeline.set_adaptation_state(adaptation_state)
                else:
                    logger.warning(('%s: Cannot handle adaptation state type ' % (self.request_id, as_props.get('type', ''))))
            else:
                logger.warning(("%s: Got JSON message but don't know what to do with it" % self.request_id))
    else:
        logger.info(('%s: Ignoring data, worker already in state %d' % (self.request_id, self.state)))
