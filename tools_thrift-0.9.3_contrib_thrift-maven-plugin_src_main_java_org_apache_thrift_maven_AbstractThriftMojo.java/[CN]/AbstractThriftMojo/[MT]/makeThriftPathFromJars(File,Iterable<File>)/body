{
  checkNotNull(classpathElementFiles,"classpathElementFiles");
  if (temporaryThriftFileDirectory.exists()) {
    cleanDirectory(temporaryThriftFileDirectory);
  }
  Set<File> thriftDirectories=newHashSet();
  for (  File classpathElementFile : classpathElementFiles) {
    if (classpathElementFile.isFile() && classpathElementFile.canRead() && !classpathElementFile.getName().endsWith(".xml")) {
      JarFile classpathJar;
      try {
        classpathJar=new JarFile(classpathElementFile);
      }
 catch (      IOException e) {
        throw new IllegalArgumentException(format("%s was not a readable artifact",classpathElementFile));
      }
      for (      JarEntry jarEntry : list(classpathJar.entries())) {
        final String jarEntryName=jarEntry.getName();
        if (jarEntry.getName().endsWith(THRIFT_FILE_SUFFIX)) {
          final File uncompressedCopy=new File(new File(temporaryThriftFileDirectory,truncatePath(classpathJar.getName())),jarEntryName);
          uncompressedCopy.getParentFile().mkdirs();
          copyStreamToFile(new RawInputStreamFacade(classpathJar.getInputStream(jarEntry)),uncompressedCopy);
          thriftDirectories.add(uncompressedCopy.getParentFile());
        }
      }
    }
 else     if (classpathElementFile.isDirectory()) {
      File[] thriftFiles=classpathElementFile.listFiles(new FilenameFilter(){
        public boolean accept(        File dir,        String name){
          return name.endsWith(THRIFT_FILE_SUFFIX);
        }
      }
);
      if (thriftFiles.length > 0) {
        thriftDirectories.add(classpathElementFile);
      }
    }
  }
  return ImmutableSet.copyOf(thriftDirectories);
}
