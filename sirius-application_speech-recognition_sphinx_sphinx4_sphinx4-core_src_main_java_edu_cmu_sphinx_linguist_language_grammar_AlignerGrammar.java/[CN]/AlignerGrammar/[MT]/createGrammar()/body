{
  logger.info("Creating Grammar");
  initialNode=createGrammarNode(Dictionary.SILENCE_SPELLING);
  finalNode=createGrammarNode(Dictionary.SILENCE_SPELLING);
  finalNode.setFinalNode(true);
  final GrammarNode branchNode=createGrammarNode(false);
  final List<GrammarNode> wordGrammarNodes=new ArrayList<GrammarNode>();
  final int end=tokens.size();
  logger.info("Creating Grammar nodes");
  for (  final String word : tokens.subList(0,end)) {
    final GrammarNode wordNode=createGrammarNode(word.toLowerCase());
    wordGrammarNodes.add(wordNode);
  }
  logger.info("Done creating grammar node");
  initialNode.add(branchNode,LogMath.LOG_ONE);
  createBaseGrammar(wordGrammarNodes,branchNode,finalNode);
  if (modelRepeats) {
    addForwardJumps(wordGrammarNodes,branchNode,finalNode);
  }
  if (modelSkips) {
    addBackwardJumps(wordGrammarNodes,branchNode,finalNode);
  }
  logger.info("Done making Grammar");
  return initialNode;
}
