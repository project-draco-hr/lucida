{
  add("help",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      dumpCommands();
      return "";
    }
    public String getHelp(){
      return "lists available commands";
    }
  }
);
  add("history",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      history.dump();
      return "";
    }
    public String getHelp(){
      return "shows command history";
    }
  }
);
  add("status",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      putResponse("Total number of commands: " + totalCommands);
      return "";
    }
    public String getHelp(){
      return "shows command status";
    }
  }
);
  add("echo",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      StringBuilder b=new StringBuilder(80);
      for (int i=1; i < args.length; i++) {
        b.append(args[i]);
        b.append(' ');
      }
      putResponse(b.toString());
      return "";
    }
    public String getHelp(){
      return "display a line of text";
    }
  }
);
  add("quit",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      done=true;
      return "";
    }
    public String getHelp(){
      return "exit the shell";
    }
  }
);
  add("on_exit",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      return "";
    }
    public String getHelp(){
      return "command executed upon exit";
    }
  }
);
  add("version",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      putResponse("Command Interpreter - Version 1.1 ");
      return "";
    }
    public String getHelp(){
      return "displays version information";
    }
  }
);
  add("gc",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      Runtime.getRuntime().gc();
      return "";
    }
    public String getHelp(){
      return "performs garbage collection";
    }
  }
);
  add("memory",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      long totalMem=Runtime.getRuntime().totalMemory();
      long freeMem=Runtime.getRuntime().freeMemory();
      putResponse("Free Memory  : " + freeMem / (1024.0 * 1024) + " mbytes");
      putResponse("Total Memory : " + totalMem / (1024.0 * 1024) + " mbytes");
      return "";
    }
    public String getHelp(){
      return "shows memory statistics";
    }
  }
);
  add("delay",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      if (args.length == 2) {
        try {
          float seconds=Float.parseFloat(args[1]);
          Thread.sleep((long)(seconds * 1000));
        }
 catch (        NumberFormatException nfe) {
          putResponse("Usage: delay time-in-seconds");
        }
catch (        InterruptedException ie) {
        }
      }
 else {
        putResponse("Usage: delay time-in-seconds");
      }
      return "";
    }
    public String getHelp(){
      return "pauses for a given number of seconds";
    }
  }
);
  add("repeat",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      if (args.length >= 3) {
        try {
          int count=Integer.parseInt(args[1]);
          String[] subargs=Arrays.copyOfRange(args,2,args.length);
          for (int i=0; i < count; i++) {
            putResponse(CommandInterpreter.this.execute(subargs));
          }
        }
 catch (        NumberFormatException nfe) {
          putResponse("Usage: repeat count command args");
        }
      }
 else {
        putResponse("Usage: repeat count command args");
      }
      return "";
    }
    public String getHelp(){
      return "repeatedly execute a command";
    }
  }
);
  add("load",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      if (args.length == 2) {
        if (!load(args[1])) {
          putResponse("load: trouble loading " + args[1]);
        }
      }
 else {
        putResponse("Usage: load filename");
      }
      return "";
    }
    public String getHelp(){
      return "load and execute commands from a file";
    }
  }
);
  add("chain",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      if (args.length > 1) {
        String[] subargs=new String[args.length - 1];
        List<String[]> commands=new ArrayList<String[]>(5);
        int count=0;
        for (int i=1; i < args.length; i++) {
          if (args[i].equals(";")) {
            if (count > 0) {
              commands.add(Arrays.copyOf(subargs,count));
              count=0;
            }
          }
 else {
            subargs[count++]=args[i];
          }
        }
        if (count > 0) {
          commands.add(Arrays.copyOf(subargs,count));
        }
        for (        String[] command : commands) {
          putResponse(CommandInterpreter.this.execute(command));
        }
      }
 else {
        putResponse("Usage: chain cmd1 ; cmd2 ; cmd3 ");
      }
      return "";
    }
    public String getHelp(){
      return "execute multiple commands on a single line";
    }
  }
);
  add("time",new CommandInterface(){
    public String execute(    CommandInterpreter ci,    String[] args){
      if (args.length > 1) {
        String[] subargs=Arrays.copyOfRange(args,1,args.length);
        long startTime=System.currentTimeMillis();
        long endTime;
        putResponse(CommandInterpreter.this.execute(subargs));
        endTime=System.currentTimeMillis();
        putResponse("Time: " + ((endTime - startTime) / 1000.0) + " seconds");
      }
 else {
        putResponse("Usage: time cmd [args]");
      }
      return "";
    }
    public String getHelp(){
      return "report the time it takes to run a command";
    }
  }
);
}
