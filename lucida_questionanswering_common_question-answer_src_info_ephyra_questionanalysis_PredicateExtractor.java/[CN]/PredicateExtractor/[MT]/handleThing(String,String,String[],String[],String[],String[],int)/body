{
  if (i + 1 == tokens.length || !chunks[i + 1].endsWith("-NP")) {
    boolean auxiliary=(i + 2 < tokens.length && !verbMod.matches(".*?" + phraseToRegex(tokens[i + 1] + " " + tokens[i + 2]) + ".*+")) ? true : false;
    if (auxiliary)     verbMod=verbMod.replaceFirst(THING_P,"") + " " + THING_R;
 else     verbMod=verbMod.replaceFirst(THING_P,THING_R);
  }
 else {
    String phrase=tokens[i];
    int j;
    for (j=i + 1; j < tokens.length; j++)     if (!pos[j].startsWith("VB") && !chunks[j].endsWith("-VP") && !(j == tokens.length - 1 && pos[j].equals(".")))     phrase+=" " + tokens[j];
 else     break;
    if (i == 0 || !chunks[i - 1].endsWith("-PP")) {
      phrase=phraseToRegex(phrase);
      boolean replaced=false;
      for (      String at : ats)       if (at.startsWith("NEdate") || at.startsWith("NEtime")) {
        verbMod=verbMod.replaceFirst(phrase,"") + " " + DATE_TIME_R;
        replaced=true;
        break;
      }
 else       if (at.startsWith("NElocation")) {
        verbMod=verbMod.replaceFirst(phrase,"") + " " + LOCATION_R;
        replaced=true;
        break;
      }
      if (!replaced) {
        Matcher m=Pattern.compile(phrase).matcher(qn);
        if (m.find()) {
          boolean auxiliary=(j + 1 < tokens.length && !verbMod.matches(".*?" + phraseToRegex(tokens[j] + " " + tokens[j + 1]) + ".*+")) ? true : false;
          String replacement=m.group(0).replaceFirst(THING_P,UNKNOWN_R);
          if (auxiliary)           verbMod=verbMod.replaceFirst(phrase,"") + " " + replacement;
 else           verbMod=verbMod.replaceFirst(phrase,replacement);
        }
      }
    }
 else {
      for (j=i - 1; j >= 0; j--)       if (chunks[j].endsWith("-PP"))       phrase=tokens[j] + " " + phrase;
 else       break;
      phrase=phraseToRegex(phrase);
      boolean replaced=false;
      for (      String at : ats)       if (at.startsWith("NEdate") || at.startsWith("NEtime")) {
        verbMod=verbMod.replaceFirst(phrase,"") + " " + DATE_TIME_R;
        replaced=true;
        break;
      }
 else       if (at.startsWith("NElocation")) {
        verbMod=verbMod.replaceFirst(phrase,"") + " " + LOCATION_R;
        replaced=true;
        break;
      }
      if (!replaced) {
        Matcher m=Pattern.compile(phrase).matcher(qn);
        if (m.find()) {
          String replacement=m.group(0).replaceFirst(THING_P,UNKNOWN_R);
          verbMod=verbMod.replaceFirst(phrase,"") + " " + replacement;
        }
      }
    }
  }
  return verbMod;
}
