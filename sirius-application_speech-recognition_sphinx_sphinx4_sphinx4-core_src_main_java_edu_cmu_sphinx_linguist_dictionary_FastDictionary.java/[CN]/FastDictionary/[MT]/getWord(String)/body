{
  text=text.toLowerCase();
  Word wordObject=wordDictionary.get(text);
  if (wordObject != null) {
    return wordObject;
  }
  String word=dictionary.get(text);
  if (word == null) {
    logger.warning("The dictionary is missing a phonetic transcription for the word '" + text + "'");
    if (wordReplacement != null) {
      wordObject=getWord(wordReplacement);
    }
 else     if (allowMissingWords) {
      if (createMissingWords) {
        if (g2pModelFile != null && !g2pModelFile.getPath().equals("")) {
          logger.warning("Generating phonetic transcription(s) for the word '" + text + "' using g2p model");
          ArrayList<Path> paths=g2pDecoder.phoneticize(text,g2pMaxPron);
          List<Pronunciation> pronunciations=new LinkedList<Pronunciation>();
          for (          Path p : paths) {
            int unitCount=p.getPath().size();
            ArrayList<Unit> units=new ArrayList<Unit>(unitCount);
            for (            String token : p.getPath()) {
              units.add(getCIUnit(token,false));
            }
            pronunciations.add(new Pronunciation(units));
            if (addSilEndingPronunciation) {
              units.add(UnitManager.SILENCE);
              pronunciations.add(new Pronunciation(units));
            }
          }
          Pronunciation[] pronunciationsArray=pronunciations.toArray(new Pronunciation[pronunciations.size()]);
          wordObject=createWord(text,pronunciationsArray,false);
          for (          Pronunciation pronunciation : pronunciationsArray) {
            pronunciation.setWord(wordObject);
          }
          wordDictionary.put(text,wordObject);
        }
 else {
          wordObject=createWord(text,null,false);
        }
      }
    }
  }
 else {
    wordObject=processEntry(text);
  }
  return wordObject;
}
