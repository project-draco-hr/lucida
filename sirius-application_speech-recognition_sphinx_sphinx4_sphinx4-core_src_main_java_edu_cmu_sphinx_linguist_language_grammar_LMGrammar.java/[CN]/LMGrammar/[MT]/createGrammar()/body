{
  languageModel.allocate();
  TimerPool.getTimer(this,"LMGrammar.create").start();
  GrammarNode firstNode=null;
  if (languageModel.getMaxDepth() > 2) {
    System.out.println("Warning: LMGrammar  limited to bigrams");
  }
  List<GrammarNode> nodes=new ArrayList<GrammarNode>();
  Set<String> words=languageModel.getVocabulary();
  for (  String word : words) {
    GrammarNode node=createGrammarNode(word);
    if (node != null && !node.isEmpty()) {
      if (node.getWord().equals(getDictionary().getSentenceStartWord())) {
        firstNode=node;
      }
 else       if (node.getWord().equals(getDictionary().getSentenceEndWord())) {
        node.setFinalNode(true);
      }
      nodes.add(node);
    }
  }
  if (firstNode == null) {
    throw new Error("No sentence start found in language model");
  }
  for (  GrammarNode prevNode : nodes) {
    if (prevNode.isFinalNode()) {
      continue;
    }
    for (    GrammarNode nextNode : nodes) {
      String prevWord=prevNode.getWord().getSpelling();
      String nextWord=nextNode.getWord().getSpelling();
      Word[] wordArray={getDictionary().getWord(prevWord),getDictionary().getWord(nextWord)};
      float logProbability=languageModel.getProbability((new WordSequence(wordArray)));
      prevNode.add(nextNode,logProbability);
    }
  }
  TimerPool.getTimer(this,"LMGrammar.create").stop();
  languageModel.deallocate();
  return firstNode;
}
