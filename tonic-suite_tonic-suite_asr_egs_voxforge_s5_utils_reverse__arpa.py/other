import sys
import codecs
if (len(sys.argv) != 2):
    print 'usage: reverse_arpa arpa.in'
    sys.exit()
arpaname = sys.argv[1]
try:
    file = codecs.open(arpaname, 'r', 'utf-8')
except IOError:
    print ('file not found: ' + arpaname)
    sys.exit()
text = file.readline()
while (text and (text[:6] != '\\data\\')):
    text = file.readline()
if (not text):
    print 'invalid ARPA file'
    sys.exit()
while (text and (text[:5] != 'ngram')):
    text = file.readline()
cngrams = []
n = 0
while (text and (text[:5] == 'ngram')):
    ind = text.split('=')
    counts = int(ind[1].strip())
    r = ind[0].split()
    read_n = int(r[1].strip())
    if (read_n != (n + 1)):
        print 'invalid ARPA file:', text
        sys.exit()
    n = read_n
    cngrams.append(counts)
    text = file.readline()
sentprob = 0.0
ngrams = []
inf = float('inf')
for n in range(1, (len(cngrams) + 1)):
    while (text and ('-grams:' not in text)):
        text = file.readline()
    if (n != int(text[1])):
        print 'invalid ARPA file:', text
        sys.exit()
    this_ngrams = {}
    for ng in range(cngrams[(n - 1)]):
        while (text and (len(text.split()) < 2)):
            text = file.readline()
            if ((not text) or ((len(text.split()) == 1) and (('-grams:' in text) or (text[:5] == '\\end\\')))):
                break
        if ((not text) or ((len(text.split()) == 1) and (('-grams:' in text) or (text[:5] == '\\end\\')))):
            break
        entry = text.split()
        prob = float(entry[0])
        if (len(entry) > (n + 1)):
            back = float(entry[(-1)])
            words = entry[1:(n + 1)]
        else:
            back = 0.0
            words = entry[1:]
        ngram = ' '.join(words)
        if ((n == 1) and (words[0] == '<s>')):
            sentprob = prob
            prob = 0.0
        this_ngrams[ngram] = (prob, back)
        for x in range((n - 1), 0, (-1)):
            l_ngram = ' '.join(words[:x])
            r_ngram = ' '.join(words[1:(1 + x)])
            if (l_ngram not in ngrams[(x - 1)]):
                ngrams[(x - 1)][l_ngram] = (0.0, inf)
            if (r_ngram not in ngrams[(x - 1)]):
                ngrams[(x - 1)][r_ngram] = (0.0, inf)
            h_ngram = ' '.join(words[(n - x):])
            if (h_ngram not in ngrams[(x - 1)]):
                ngrams[(x - 1)][h_ngram] = (0.0, inf)
        text = file.readline()
        if ((not text) or ((len(text.split()) == 1) and (('-grams:' in text) or (text[:5] == '\\end\\')))):
            break
    ngrams.append(this_ngrams)
while (text and (text[:5] != '\\end\\')):
    text = file.readline()
if (not text):
    print 'invalid ARPA file'
    sys.exit()
file.close()
print '\\data\\'
for n in range(1, (len(cngrams) + 1)):
    print ((('ngram ' + str(n)) + '=') + str(len(ngrams[(n - 1)].keys())))
offset = 0.0
for n in range(1, (len(cngrams) + 1)):
    print (('\\' + str(n)) + '-grams:')
    keys = ngrams[(n - 1)].keys()
    keys.sort()
    for ngram in keys:
        prob = ngrams[(n - 1)][ngram]
        words = ngram.split()
        rstr = ' '.join(reversed(words))
        rev_ngram = rstr.replace('<s>', '<temp>').replace('</s>', '<s>').replace('<temp>', '</s>')
        revprob = prob[0]
        if (prob[1] != inf):
            revprob = (revprob + prob[1])
        for x in range((n - 1), 0, (-1)):
            l_ngram = ' '.join(words[:x])
            if (l_ngram not in ngrams[(x - 1)]):
                sys.stderr.write((((rev_ngram + ': not found ') + l_ngram) + '\n'))
            p_l = ngrams[(x - 1)][l_ngram][0]
            revprob = (revprob + p_l)
            r_ngram = ' '.join(words[1:(1 + x)])
            if (r_ngram not in ngrams[(x - 1)]):
                sys.stderr.write((((rev_ngram + ': not found ') + r_ngram) + '\n'))
            p_r = ngrams[(x - 1)][r_ngram][0]
            revprob = (revprob - p_r)
        if (n != len(cngrams)):
            back = 0.0
            if (rev_ngram[:3] == '<s>'):
                if (n == 1):
                    offset = revprob
                    revprob = sentprob
                    back = offset
                elif (n == 2):
                    revprob = (revprob + offset)
            if (prob[1] != inf):
                print revprob, rev_ngram.encode('utf-8'), back
            else:
                print revprob, rev_ngram.encode('utf-8'), '-100000.0'
        else:
            if ((n == 2) and (rev_ngram[:3] == '<s>')):
                revprob = (revprob + offset)
            print revprob, rev_ngram.encode('utf-8')
print '\\end\\'
