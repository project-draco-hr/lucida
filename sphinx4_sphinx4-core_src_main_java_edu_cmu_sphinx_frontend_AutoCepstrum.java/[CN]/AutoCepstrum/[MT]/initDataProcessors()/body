{
  try {
    Properties featParams=loader.getProperties();
    selectedDataProcessors=new ArrayList<DataProcessor>();
    double lowFreq=parseDouble(featParams.getProperty("-lowerf"));
    double hiFreq=parseDouble(featParams.getProperty("-upperf"));
    int numFilter=parseInt(featParams.getProperty("-nfilt"));
    if (loader instanceof KaldiLoader)     filterBank=new MelFrequencyFilterBank2(lowFreq,hiFreq,numFilter);
 else     filterBank=new MelFrequencyFilterBank(lowFreq,hiFreq,numFilter);
    selectedDataProcessors.add(filterBank);
    if ((featParams.get("-remove_noise") != null) && (featParams.get("-remove_noise").equals("yes"))) {
      denoise=new Denoise(Denoise.class.getField("LAMBDA_POWER").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("LAMBDA_A").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("LAMBDA_B").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("LAMBDA_T").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("MU_T").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("EXCITATION_THRESHOLD").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("MAX_GAIN").getAnnotation(S4Double.class).defaultValue(),Denoise.class.getField("SMOOTH_WINDOW").getAnnotation(S4Integer.class).defaultValue());
      denoise.setPredecessor(selectedDataProcessors.get(selectedDataProcessors.size() - 1));
      selectedDataProcessors.add(denoise);
    }
    if ((featParams.get("-transform") != null) && (featParams.get("-transform").equals("dct"))) {
      dct=new DiscreteCosineTransform2(numFilter,DiscreteCosineTransform.class.getField("PROP_CEPSTRUM_LENGTH").getAnnotation(S4Integer.class).defaultValue());
    }
 else     if ((featParams.get("-transform") != null) && (featParams.get("-transform").equals("kaldi"))) {
      dct=new KaldiDiscreteCosineTransform(numFilter,DiscreteCosineTransform.class.getField("PROP_CEPSTRUM_LENGTH").getAnnotation(S4Integer.class).defaultValue());
    }
 else {
      dct=new DiscreteCosineTransform(numFilter,DiscreteCosineTransform.class.getField("PROP_CEPSTRUM_LENGTH").getAnnotation(S4Integer.class).defaultValue());
    }
    dct.setPredecessor(selectedDataProcessors.get(selectedDataProcessors.size() - 1));
    selectedDataProcessors.add(dct);
    if (featParams.get("-lifter") != null) {
      lifter=new Lifter(Integer.parseInt((String)featParams.get("-lifter")));
      lifter.setPredecessor(selectedDataProcessors.get(selectedDataProcessors.size() - 1));
      selectedDataProcessors.add(lifter);
    }
    logger.info("Cepstrum component auto-configured as follows: " + toString());
  }
 catch (  NoSuchFieldException exc) {
    throw new RuntimeException(exc);
  }
}
