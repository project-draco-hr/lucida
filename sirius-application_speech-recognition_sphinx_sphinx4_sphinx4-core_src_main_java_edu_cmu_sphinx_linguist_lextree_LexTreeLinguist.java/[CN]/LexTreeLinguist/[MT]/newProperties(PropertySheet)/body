{
  logger=ps.getLogger();
  logMath=LogMath.getInstance();
  acousticModel=(AcousticModel)ps.getComponent(PROP_ACOUSTIC_MODEL);
  unitManager=(UnitManager)ps.getComponent(PROP_UNIT_MANAGER);
  languageModel=(BackoffLanguageModel)ps.getComponent(PROP_LANGUAGE_MODEL);
  dictionary=(Dictionary)ps.getComponent(PROP_DICTIONARY);
  fullWordHistories=ps.getBoolean(PROP_FULL_WORD_HISTORIES);
  wantUnigramSmear=ps.getBoolean(PROP_WANT_UNIGRAM_SMEAR);
  logWordInsertionProbability=logMath.linearToLog(ps.getDouble(PROP_WORD_INSERTION_PROBABILITY));
  logSilenceInsertionProbability=logMath.linearToLog(ps.getDouble(PROP_SILENCE_INSERTION_PROBABILITY));
  logFillerInsertionProbability=logMath.linearToLog(ps.getDouble(PROP_FILLER_INSERTION_PROBABILITY));
  logUnitInsertionProbability=logMath.linearToLog(ps.getDouble(PROP_UNIT_INSERTION_PROBABILITY));
  languageWeight=ps.getFloat(PROP_LANGUAGE_WEIGHT);
  addFillerWords=(ps.getBoolean(PROP_ADD_FILLER_WORDS));
  generateUnitStates=(ps.getBoolean(PROP_GENERATE_UNIT_STATES));
  unigramSmearWeight=ps.getFloat(PROP_UNIGRAM_SMEAR_WEIGHT);
  maxArcCacheSize=ps.getInt(PROP_CACHE_SIZE);
  cacheEnabled=maxArcCacheSize > 0;
  if (cacheEnabled) {
    arcCache=new LRUCache<LexTreeState,SearchStateArc[]>(maxArcCacheSize);
  }
}
