{
  ArrayList<String> dropped=new ArrayList<String>();
  HashSet<String> expansionSet=new HashSet<String>();
  for (  String expansion : expansions.keySet()) {
    if (!expansionSet.add(StringUtils.normalize(expansion))) {
      dropped.add(expansion);
      continue;
    }
    String[] kws=KeywordExtractor.getKeywords(expansion);
    if (kws.length == 0)     dropped.add(expansion);
  }
  for (  String expansion : dropped)   expansions.remove(expansion);
  if (expansions.size() == 0)   return 0;
  Double[] weights=expansions.values().toArray(new Double[expansions.size()]);
  Arrays.sort(weights);
  double hurdle=weights[Math.max(weights.length - maxExpansions,0)];
  hurdle=Math.max(hurdle,minExpansionWeight);
  dropped.clear();
  for (  String expansion : expansions.keySet())   if (expansions.get(expansion) < hurdle)   dropped.add(expansion);
  for (  String expansion : dropped)   expansions.remove(expansion);
  dropped.clear();
  if (strict) {
    int numToDrop=Math.max(expansions.size() - maxExpansions,0);
    for (    String expansion : expansions.keySet()) {
      if (numToDrop == 0)       break;
      if (expansions.get(expansion) == hurdle) {
        dropped.add(expansion);
        numToDrop--;
      }
    }
    for (    String expansion : dropped)     expansions.remove(expansion);
  }
  return hurdle;
}
