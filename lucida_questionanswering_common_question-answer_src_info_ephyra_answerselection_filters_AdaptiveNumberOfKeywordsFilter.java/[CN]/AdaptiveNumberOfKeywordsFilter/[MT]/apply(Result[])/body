{
  ArrayList<Result> rawResults=new ArrayList<Result>();
  int lastScore=0;
  String lastDocID="";
  int keywordCount=1;
  for (  Result result : results) {
    if (result.getScore() != Float.NEGATIVE_INFINITY) {
      String[] keywords=NETagger.tokenize(result.getQuery().getQueryString());
      for (int k=0; k < keywords.length; k++)       keywords[k]=SnowballStemmer.stem(keywords[k]);
      int k=keywords.length;
      keywordCount=k;
      String[] wordsInResult=NETagger.tokenize(result.getAnswer());
      for (int r=0; r < wordsInResult.length; r++)       wordsInResult[r]=SnowballStemmer.stem(wordsInResult[r]);
      int m=getNumberOfMatches(keywords,wordsInResult);
      if (m >= Math.floor(Math.sqrt(k - 1) + 1)) {
        lastDocID=result.getDocID();
        if (lastDocID == null)         lastDocID="";
        lastScore=((m * m + 1) / 2);
        result.incScore(m * m);
        rawResults.add(result);
      }
 else       if ((lastScore > 0) && lastDocID.equalsIgnoreCase(result.getDocID())) {
        result.incScore(lastScore);
        rawResults.add(result);
        lastScore=(lastScore / 2);
      }
 else {
        lastScore=0;
      }
    }
  }
  if (rawResults.size() < 100) {
    for (    Result result : results) {
      if (result.getScore() != Float.NEGATIVE_INFINITY) {
        String[] keywords=NETagger.tokenize(result.getQuery().getQueryString());
        ArrayList<String> keywordList=new ArrayList<String>();
        for (int k=0; k < keywords.length; k++)         if (keywords[k].matches("[A-Z]++.*+"))         keywordList.add(SnowballStemmer.stem(keywords[k]));
        keywords=keywordList.toArray(new String[keywordList.size()]);
        int k=keywords.length;
        if ((keywords.length != 0) && (k < keywordCount)) {
          String[] wordsInResult=NETagger.tokenize(result.getAnswer());
          for (int r=0; r < wordsInResult.length; r++)           wordsInResult[r]=SnowballStemmer.stem(wordsInResult[r]);
          int m=getNumberOfMatches(keywords,wordsInResult);
          if (m >= Math.floor(Math.sqrt(k - 1) + 1)) {
            result.incScore(m * m);
            rawResults.add(result);
          }
        }
      }
    }
  }
  return rawResults.toArray(new Result[rawResults.size()]);
}
