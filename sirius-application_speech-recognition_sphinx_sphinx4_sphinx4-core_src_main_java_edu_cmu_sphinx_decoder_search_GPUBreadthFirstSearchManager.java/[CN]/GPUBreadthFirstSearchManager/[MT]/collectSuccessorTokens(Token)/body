{
  SearchState state=token.getSearchState();
  if (token.isFinal()) {
    resultList.add(token);
  }
  if (token.getScore() < threshold) {
    return;
  }
  if (state instanceof WordSearchState && token.getScore() < wordThreshold) {
    return;
  }
  SearchStateArc[] arcs=state.getSuccessors();
  for (  SearchStateArc arc : arcs) {
    SearchState nextState=arc.getState();
    float logEntryScore=token.getScore() + arc.getProbability();
    if (wantEntryPruning) {
      if (logEntryScore < threshold) {
        continue;
      }
      if (nextState instanceof WordSearchState && logEntryScore < wordThreshold) {
        continue;
      }
    }
    Token predecessor=getResultListPredecessor(token);
    Token bestToken=getBestToken(nextState);
    boolean firstToken=bestToken == null;
    if (firstToken || bestToken.getScore() <= logEntryScore) {
      Token newToken=new Token(predecessor,nextState,logEntryScore,arc.getInsertionProbability(),arc.getLanguageProbability(),currentFrameNumber);
      tokensCreated.value++;
      setBestToken(newToken,nextState);
      if (!newToken.isEmitting()) {
        if (!isVisited(newToken)) {
          collectSuccessorTokens(newToken);
        }
      }
 else {
        if (firstToken) {
          activeList.add(newToken);
        }
 else {
          activeList.replace(bestToken,newToken);
          viterbiPruned.value++;
        }
      }
    }
 else {
      viterbiPruned.value++;
    }
  }
}
