{
  double[] in=input.getValues();
  if (numberFftPoints < in.length) {
    int i=0;
    for (; i < numberFftPoints; i++) {
      inputFrame[i].set(in[i],0.0f);
    }
    for (; i < in.length; i++) {
      tempComplex.set(in[i],0.0f);
      inputFrame[i % numberFftPoints].addComplex(inputFrame[i % numberFftPoints],tempComplex);
    }
  }
 else {
    int i=0;
    for (; i < in.length; i++) {
      inputFrame[i].set(in[i],0.0f);
    }
    for (; i < numberFftPoints; i++) {
      inputFrame[i].reset();
    }
  }
  double[] outputSpectrum=new double[(numberFftPoints >> 1) + 1];
  recurseFft(inputFrame,outputSpectrum,numberFftPoints,invert);
  DoubleData output=new DoubleData(outputSpectrum,input.getSampleRate(),input.getFirstSampleNumber());
  return output;
}
