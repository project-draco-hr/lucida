{
  double divisor;
  if (!invert) {
    divisor=1.0;
  }
 else {
    divisor=numberFftPoints;
  }
  for (int i=0; i < numberFftPoints; i++) {
    to[i].reset();
    from[i].scaleComplex(input[i],divisor);
  }
  butterflyStage(from,to,numberFftPoints,numberFftPoints >> 1);
  if ((this.logBase2NumberFftPoints & 1) == 0) {
    for (int i=0; i <= (numberFftPoints >> 1); i++) {
      output[i]=from[i].squaredMagnitudeComplex();
    }
  }
 else {
    for (int i=0; i <= (numberFftPoints >> 1); i++) {
      output[i]=to[i].squaredMagnitudeComplex();
    }
  }
}
