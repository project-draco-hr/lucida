{
  int length=url.length;
  int init=0xe6359a60;
  int a=0x9e3779b9;
  int b=0x9e3779b9;
  int c=init;
  int k=0;
  int len;
  int mix[];
  for (len=length; len >= 12; len-=12) {
    a+=url[k + 0] + (url[k + 1] << 8) + (url[k + 2] << 16)+ (url[k + 3] << 24);
    b+=url[k + 4] + (url[k + 5] << 8) + (url[k + 6] << 16)+ (url[k + 7] << 24);
    c+=url[k + 8] + (url[k + 9] << 8) + (url[k + 10] << 16)+ (url[k + 11] << 24);
    mix=mix(a,b,c);
    a=mix[0];
    b=mix[1];
    c=mix[2];
    k+=12;
  }
  c+=length;
switch (len) {
case 11:
    c+=url[k + 10] << 24;
case 10:
  c+=url[k + 9] << 16;
case 9:
c+=url[k + 8] << 8;
case 8:
b+=url[k + 7] << 24;
case 7:
b+=url[k + 6] << 16;
case 6:
b+=url[k + 5] << 8;
case 5:
b+=url[k + 4];
case 4:
a+=url[k + 3] << 24;
case 3:
a+=url[k + 2] << 16;
case 2:
a+=url[k + 1] << 8;
case 1:
a+=url[k + 0];
default :
mix=mix(a,b,c);
break;
}
return mix[2];
}
