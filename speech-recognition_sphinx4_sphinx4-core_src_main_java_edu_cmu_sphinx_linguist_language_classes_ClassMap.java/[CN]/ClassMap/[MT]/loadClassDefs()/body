{
  BufferedReader reader=new BufferedReader(new InputStreamReader(classDefsLocation.openStream()));
  String line;
  while ((line=reader.readLine()) != null) {
    StringTokenizer st=new StringTokenizer(line," \t\n\r\f=");
    if (st.countTokens() != 3) {
      throw new IOException("corrupt word to class def: " + line + "; "+ st.countTokens());
    }
    String className=st.nextToken().toLowerCase();
    float linearProb=Float.parseFloat(st.nextToken());
    String word=st.nextToken().toLowerCase();
    if (logger.isLoggable(Level.FINE)) {
      logger.fine(word + " --> " + className+ " "+ linearProb);
    }
    wordToClassProbabilities.put(word,new ClassProbability(className,logMath.linearToLog(linearProb)));
    classVocabulary.put(className,new Word(className,null,false));
    addWordInClass(className,word);
  }
  reader.close();
  checkClasses();
  logger.info("Loaded word to class mappings for " + wordToClassProbabilities.size() + " words");
}
