{
  InputStream stream=getClass().getResource(name).openStream();
  Reader reader=new InputStreamReader(stream);
  BufferedReader br=new BufferedReader(reader);
  String line;
  while (null != (line=br.readLine())) {
    Data data=frontend.getData();
    if (line.startsWith("DataStartSignal"))     assertThat(data,instanceOf(DataStartSignal.class));
    if (line.startsWith("DataEndSignal"))     assertThat(data,instanceOf(DataEndSignal.class));
    if (line.startsWith("SpeechStartSignal"))     assertThat(data,instanceOf(SpeechStartSignal.class));
    if (line.startsWith("SpeechEndSignal"))     assertThat(data,instanceOf(SpeechEndSignal.class));
    if (line.startsWith("Frame")) {
      assertThat(data,instanceOf(DoubleData.class));
      double[] values=((DoubleData)data).getValues();
      String[] tokens=line.split(" ");
      assertThat(values.length,equalTo(parseInt(tokens[1])));
      for (int i=0; i < values.length; i++)       assertThat(values[i],closeTo(parseDouble(tokens[2 + i]),abs(0.01 * values[i])));
    }
    if (line.startsWith("FloatFrame")) {
      String[] tokens=line.split(" ");
      Assert.assertTrue(data instanceof FloatData);
      float[] values=((FloatData)data).getValues();
      Assert.assertEquals(values.length,(int)Integer.valueOf(tokens[1]));
      for (int i=0; i < values.length; i++)       assertThat(Double.valueOf(values[i]),closeTo(parseFloat(tokens[2 + i]),abs(0.01 * values[i])));
    }
  }
}
