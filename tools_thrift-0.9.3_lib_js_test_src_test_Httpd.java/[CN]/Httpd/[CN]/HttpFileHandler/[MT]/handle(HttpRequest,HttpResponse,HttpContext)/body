{
  String method=request.getRequestLine().getMethod().toUpperCase(Locale.ENGLISH);
  if (!method.equals("GET") && !method.equals("HEAD") && !method.equals("POST")) {
    throw new MethodNotSupportedException(method + " method not supported");
  }
  String target=request.getRequestLine().getUri();
  if (request instanceof HttpEntityEnclosingRequest && target.equals("/service")) {
    HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
    byte[] entityContent=EntityUtils.toByteArray(entity);
    System.out.println("Incoming content: " + new String(entityContent));
    final String output=this.thriftRequest(entityContent);
    System.out.println("Outgoing content: " + output);
    EntityTemplate body=new EntityTemplate(new ContentProducer(){
      public void writeTo(      final OutputStream outstream) throws IOException {
        OutputStreamWriter writer=new OutputStreamWriter(outstream,"UTF-8");
        writer.write(output);
        writer.flush();
      }
    }
);
    body.setContentType("text/html; charset=UTF-8");
    response.setEntity(body);
  }
 else {
    if (target.indexOf("?") != -1) {
      target=target.substring(1,target.indexOf("?"));
    }
    final File file=new File(this.docRoot,URLDecoder.decode(target,"UTF-8"));
    if (!file.exists()) {
      response.setStatusCode(HttpStatus.SC_NOT_FOUND);
      EntityTemplate body=new EntityTemplate(new ContentProducer(){
        public void writeTo(        final OutputStream outstream) throws IOException {
          OutputStreamWriter writer=new OutputStreamWriter(outstream,"UTF-8");
          writer.write("<html><body><h1>");
          writer.write("File ");
          writer.write(file.getPath());
          writer.write(" not found");
          writer.write("</h1></body></html>");
          writer.flush();
        }
      }
);
      body.setContentType("text/html; charset=UTF-8");
      response.setEntity(body);
      System.out.println("File " + file.getPath() + " not found");
    }
 else     if (!file.canRead() || file.isDirectory()) {
      response.setStatusCode(HttpStatus.SC_FORBIDDEN);
      EntityTemplate body=new EntityTemplate(new ContentProducer(){
        public void writeTo(        final OutputStream outstream) throws IOException {
          OutputStreamWriter writer=new OutputStreamWriter(outstream,"UTF-8");
          writer.write("<html><body><h1>");
          writer.write("Access denied");
          writer.write("</h1></body></html>");
          writer.flush();
        }
      }
);
      body.setContentType("text/html; charset=UTF-8");
      response.setEntity(body);
      System.out.println("Cannot read file " + file.getPath());
    }
 else {
      String mimeType="application/octet-stream";
      MimeUtil2 mimeUtil=new MimeUtil2();
synchronized (this) {
        mimeUtil.registerMimeDetector(ExtensionMimeDetector.class.getName());
      }
      Collection<MimeType> collection=mimeUtil.getMimeTypes(file);
      Iterator<MimeType> iterator=collection.iterator();
      while (iterator.hasNext()) {
        MimeType mt=iterator.next();
        mimeType=mt.getMediaType() + "/" + mt.getSubType();
        break;
      }
      response.setStatusCode(HttpStatus.SC_OK);
      FileEntity body=new FileEntity(file,mimeType);
      response.addHeader("Content-Type",mimeType);
      response.setEntity(body);
      System.out.println("Serving file " + file.getPath());
    }
  }
}
