def fromString(cls, syntacticParse):
    'Get a ParseTree from a parenthesized string.'

    def fromStringHelper(syntacticParse, wordCount):
        leafMatch = cls.LEAF_NODE_MATCHER.match(syntacticParse)
        if leafMatch:
            leaf = ParseTree(leafMatch.group(1), leafMatch.group(2))
            leaf.start = wordCount
            leaf.end = (wordCount + 1)
            return (leaf, syntacticParse[leafMatch.end():], leaf.end)
        nodeStartMatch = cls.NODE_START_MATCHER.match(syntacticParse)
        result = ParseTree(nodeStartMatch.group(1))
        result.start = wordCount
        remainder = syntacticParse[nodeStartMatch.end():]
        nodeEndMatch = cls.NODE_END_MATCHER.match(remainder)
        while (not nodeEndMatch):
            (child, remainder, wordCount) = fromStringHelper(remainder, wordCount)
            child.parent = result
            result.children.append(child)
            nodeEndMatch = cls.NODE_END_MATCHER.match(remainder)
        result.end = wordCount
        return (result, remainder[nodeEndMatch.end():], wordCount)
    syntacticParse = cls.EMPTY_NODE_MATCHER.sub('', syntacticParse)
    (result, remainder, wordCount) = fromStringHelper(syntacticParse, 0)
    result.parent = None
    return result
