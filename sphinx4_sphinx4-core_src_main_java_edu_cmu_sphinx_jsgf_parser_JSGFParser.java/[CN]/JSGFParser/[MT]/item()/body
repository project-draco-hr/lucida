{
  JSGFRule r;
  ArrayList<String> tags=null;
  int count=-1;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case GRAMMAR:
case IMPORT:
case PUBLIC:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case STRING_LITERAL:
case IDENTIFIER:
case 28:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case GRAMMAR:
case IMPORT:
case PUBLIC:
case INTEGER_LITERAL:
case FLOATING_POINT_LITERAL:
case STRING_LITERAL:
case IDENTIFIER:
      r=terminal();
    break;
case 28:
  r=ruleRef();
break;
default :
jj_la1[14]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 30:
case 35:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 30:
jj_consume_token(30);
count=JSGFRuleCount.ZERO_OR_MORE;
break;
case 35:
jj_consume_token(35);
count=JSGFRuleCount.ONCE_OR_MORE;
break;
default :
jj_la1[15]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[16]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TAG:
tags=tags();
break;
default :
jj_la1[17]=jj_gen;
;
}
break;
case 36:
jj_consume_token(36);
r=alternatives();
jj_consume_token(37);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 30:
case 35:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 30:
jj_consume_token(30);
count=JSGFRuleCount.ZERO_OR_MORE;
break;
case 35:
jj_consume_token(35);
count=JSGFRuleCount.ONCE_OR_MORE;
break;
default :
jj_la1[18]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[19]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TAG:
tags=tags();
break;
default :
jj_la1[20]=jj_gen;
;
}
break;
case 38:
jj_consume_token(38);
r=alternatives();
jj_consume_token(39);
count=JSGFRuleCount.OPTIONAL;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case TAG:
tags=tags();
break;
default :
jj_la1[21]=jj_gen;
;
}
break;
default :
jj_la1[22]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (count != -1) r=new JSGFRuleCount(r,count);
if (tags != null) {
for (String tag : tags) {
if (tag.charAt(0) == '{') {
tag=tag.substring(1,tag.length() - 1);
tag=tag.replace('\u005c\u005c',' ');
}
r=new JSGFRuleTag(r,tag);
}
}
{
if (true) return r;
}
throw new Error("Missing return statement in function");
}
