{
  int i=0;
  byte[] b=new byte[2];
  byte[] c=new byte[80];
  is.mark(256);
  try {
    if (is.read(b,0,2) != 2) {
      is.reset();
      return null;
    }
    if ((b[0] == 0x23) && (b[1] == 0x4A)) {
      i=0;
      c[i++]=b[0];
      c[i++]=b[1];
      while (i < 80) {
        if (is.read(b,0,1) != 1) {
          is.reset();
          return null;
        }
        if ((b[0] == 0x0A) || (b[0] == 0x0D))         break;
        c[i++]=b[0];
      }
    }
 else     if ((b[0] == 0x23) && (b[1] == 0x00)) {
      i=0;
      c[i++]=b[0];
      while (i < 80) {
        if (is.read(b,0,2) != 2) {
          is.reset();
          return null;
        }
        if (b[1] != 0)         return null;
        if ((b[0] == 0x0A) || (b[0] == 0x0D))         break;
        c[i++]=b[0];
      }
    }
 else     if ((b[0] == 0x00) && (b[1] == 0x23)) {
      i=0;
      c[i++]=b[1];
      while (i < 80) {
        if (is.read(b,0,2) != 2) {
          is.reset();
          return null;
        }
        if (b[0] != 0)         return null;
        if ((b[1] == 0x0A) || (b[1] == 0x0D))         break;
        c[i++]=b[1];
      }
    }
  }
 catch (  IOException ioe) {
    try {
      is.reset();
    }
 catch (    IOException ioe2) {
    }
    return null;
  }
  if (i == 0) {
    try {
      is.reset();
    }
 catch (    IOException ioe2) {
    }
    return null;
  }
  String estr=new String(c,0,i);
  StringTokenizer st=new StringTokenizer(estr," \u005ct\u005cn\u005cr\u005cf;");
  String id=null;
  String ver=null;
  String enc=null;
  String loc=null;
  if (st.hasMoreTokens())   id=st.nextToken();
  if (!id.equals("#JSGF")) {
    try {
      is.reset();
    }
 catch (    IOException ioe2) {
    }
    return null;
  }
  if (st.hasMoreTokens())   ver=st.nextToken();
  if (st.hasMoreTokens())   enc=st.nextToken();
  if (st.hasMoreTokens())   loc=st.nextToken();
  return new JSGFEncoding(ver,enc,loc);
}
