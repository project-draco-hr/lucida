{
  int lastPathIndex=paths.size() - 1;
  ArrayList<Arc> currentExploredArcs=exploredArcs[start.getId()];
  paths.get(lastPathIndex).add(start);
  if (start.getNumArcs() != 0) {
    int arcCount=0;
    int numArcs=start.getNumArcs();
    for (int j=0; j < numArcs; j++) {
      Arc arc=start.getArc(j);
      if ((currentExploredArcs == null) || !currentExploredArcs.contains(arc)) {
        lastPathIndex=paths.size() - 1;
        if (arcCount++ > 0) {
          duplicatePath(lastPathIndex,fst.getStart(),start,paths);
          lastPathIndex=paths.size() - 1;
          paths.get(lastPathIndex).add(start);
        }
        State next=arc.getNextState();
        addExploredArc(start.getId(),arc,exploredArcs);
        if (next.getId() != start.getId()) {
          depthFirstSearchNext(fst,next,paths,exploredArcs,accessible);
        }
      }
    }
  }
  lastPathIndex=paths.size() - 1;
  accessible.add(start);
  return start;
}
