def _writeSubTree(self, nodeStr=None):
    ' writes a subtree to the new file\n\t\t    if nodeStr is not given, reads a line from the old file\n\t\t'
    if (nodeStr == None):
        nodeStr = self._reader.readline().strip((whitespace + '()'))
    elif (len(nodeStr) == 0):
        return
    try:
        tupel = map(int, nodeStr.split(','))
    except ValueError:
        raise FormatError('tree entry', nodeStr)
    if (len(tupel) == 2):
        self._writer.open('node', id=str((tupel[0] - 1)))
        self._writeInformation(tupel[1])
        self._writer.close('node')
        return
    elif (len(tupel) == 3):
        try:
            qId = str(self._indexMap[(tupel[0], tupel[1])])
        except KeyError:
            indexStr = (('\nentries of question index map:\n' + repr(self._indexMap)) + '\n')
            raise FormatError('valid tree node', (nodeStr + indexStr))
        self._writer.open('node', id=qId)
        self._writeInformation(tupel[2])
        self._writeSubTree()
        self._writeSubTree()
        self._writer.close('node')
        return
    else:
        raise FormatError('tree entry', nodeStr)
