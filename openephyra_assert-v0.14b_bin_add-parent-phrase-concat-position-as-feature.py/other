import string
import sys
import re
import os
TRUE = 1
FALSE = 0
if (len(sys.argv) == 1):
    print 'Usage: add-parent-phrase-and-head-as-feature.py <data-file> <phrase-index> <ordinal-index> <position-index>'
    print 'FOR THIS SCRIPT TO WORK, THE NODES MUST BE ARRANGED IN ASCENDING ORDER OF NODE START-END INDICES'
    sys.exit(1)
infile = open(sys.argv[1])
phrase_index = int(sys.argv[2])
ordinal_index = int(sys.argv[3])
position_index = int(sys.argv[4])
feature_vector_list = []
a_feature_vector = infile.readline()
modified_feature_vector_list = []
while (a_feature_vector != ''):
    if (a_feature_vector == '\n'):
        modified_feature_vector_list = []
        for i in range(0, len(feature_vector_list)):
            found_parent_flag = FALSE
            for k in range((i + 1), len(feature_vector_list)):
                if ((int(feature_vector_list[k][2]) == int(feature_vector_list[i][2])) and (int(feature_vector_list[k][3]) >= int(feature_vector_list[i][3]))):
                    found_parent_flag = TRUE
                    parent_index = k
                    break
                elif (feature_vector_list[k][2] != int(feature_vector_list[i][2])):
                    break
            if (found_parent_flag == FALSE):
                for j in range((i - 1), 0, (-1)):
                    if (int(feature_vector_list[j][3]) < int(feature_vector_list[i][3])):
                        if (found_parent_flag == TRUE):
                            break
                        continue
                    if (int(feature_vector_list[j][3]) >= int(feature_vector_list[i][3])):
                        found_parent_flag = TRUE
                        parent_index = j
                        continue
            if (found_parent_flag == FALSE):
                parent_phrase_type = 'U'
                parent_phrase_headword = 'U'
                parent_phrase_headword_pos = 'U'
                parent_phrase_start = '0'
                parent_phrase_end = '100'
            else:
                parent_phrase_type = ('%s-%s-%s' % (feature_vector_list[parent_index][phrase_index], feature_vector_list[parent_index][ordinal_index], feature_vector_list[parent_index][position_index]))
                parent_phrase_start = feature_vector_list[parent_index][2]
                parent_phrase_end = feature_vector_list[parent_index][3]
            some_list = ([] + feature_vector_list[i])
            modified_feature_vector_list = (modified_feature_vector_list + [some_list])
            modified_feature_vector_list[(-1)][(phrase_index + 1):(phrase_index + 1)] = [parent_phrase_type]
            modified_feature_vector_list[(-1)][(phrase_index + 2):(phrase_index + 2)] = [parent_phrase_end]
            modified_feature_vector_list[(-1)][(phrase_index + 2):(phrase_index + 2)] = [parent_phrase_start]
        for list in modified_feature_vector_list:
            print string.join(list)
        print 
        feature_vector_list = []
        modified_feature_vector_list = []
    elif ((a_feature_vector != '') and (a_feature_vector != '\n')):
        feature_vector_list.append(string.split(a_feature_vector))
    a_feature_vector = infile.readline()
