{
  ClassifierLearner learner=null;
  if (model.equals(ADA_BOOST_10_M)) {
    learner=new AdaBoost();
  }
 else   if (model.equals(ADA_BOOST_100_M)) {
    learner=new BoostedStumpLearner();
  }
 else   if (model.equals(ADA_BOOST_N_M)) {
    learner=new AdaBoost(new DecisionTreeLearner(),NUM_BOOSTS);
  }
 else   if (model.equals(ADA_BOOST_L_M)) {
    learner=new AdaBoost.L();
  }
 else   if (model.equals(BALANCED_WINNOW_M)) {
    learner=new BalancedWinnow();
  }
 else   if (model.equals(DECISION_TREE_M)) {
    learner=new DecisionTreeLearner();
  }
 else   if (model.equals(KNN_M)) {
    learner=new KnnLearner();
  }
 else   if (model.equals(KWAY_MIXTURE_M)) {
    learner=new KWayMixtureLearner();
  }
 else   if (model.equals(MARGIN_PERCEPTRON_M)) {
    learner=new MarginPerceptron();
  }
 else   if (model.equals(MAX_ENT_M)) {
    learner=new MaxEntLearner();
  }
 else   if (model.equals(NAIVE_BAYES_M)) {
    learner=new NaiveBayes();
  }
 else   if (model.equals(NEGATIVE_BINOMIAL_M)) {
    learner=new NegativeBinomialLearner();
  }
 else   if (model.equals(SVM_M)) {
    learner=new SVMLearner();
  }
 else   if (model.equals(VOTED_PERCEPTRON_M)) {
    learner=new VotedPerceptron();
  }
 else {
    MsgPrinter.printErrorMsg("Unknown model: " + model);
    System.exit(1);
  }
  return learner;
}
