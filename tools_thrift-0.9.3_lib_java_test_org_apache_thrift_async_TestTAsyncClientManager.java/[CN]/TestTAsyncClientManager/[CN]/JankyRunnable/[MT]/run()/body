{
  for (int i=0; i < numCalls_ && !client_.hasError(); i++) {
    final int iteration=i;
    try {
      final CountDownLatch latch=new CountDownLatch(1);
      final AtomicBoolean returned=new AtomicBoolean(false);
      client_.Janky(1,new AsyncMethodCallback<Srv.AsyncClient.Janky_call>(){
        @Override public void onComplete(        Janky_call response){
          try {
            assertEquals(3,response.getResult());
            returned.set(true);
            latch.countDown();
          }
 catch (          TException e) {
            latch.countDown();
            fail(e);
          }
        }
        @Override public void onError(        Exception exception){
          try {
            StringWriter sink=new StringWriter();
            exception.printStackTrace(new PrintWriter(sink,true));
            fail("unexpected onError on iteration " + iteration + ": "+ sink.toString());
          }
  finally {
            latch.countDown();
          }
        }
      }
);
      boolean calledBack=latch.await(30,TimeUnit.SECONDS);
      assertTrue("wasn't called back in time on iteration " + iteration,calledBack);
      assertTrue("onComplete not called on iteration " + iteration,returned.get());
      this.numSuccesses_++;
    }
 catch (    Exception e) {
      fail(e);
    }
  }
}
