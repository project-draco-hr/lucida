def readiter(fi, names, sep=' '):
    "\n    Return an iterator for item sequences read from a file object.\n    This function reads a sequence from a file object L{fi}, and\n    yields the sequence as a list of mapping objects. Each line\n    (item) from the file object is split by the separator character\n    L{sep}. Separated values of the item are named by L{names},\n    and stored in a mapping object. Every item has a field 'F' that\n    is reserved for storing features.\n\n    @type   fi:     file\n    @param  fi:     The file object.\n    @type   names:  tuple\n    @param  names:  The list of field names.\n    @type   sep:    str\n    @param  sep:    The separator character.\n    @rtype          list of mapping objects\n    @return         An iterator for sequences.\n    "
    X = []
    for line in fi:
        line = line.strip('\n')
        if (not line):
            yield X
            X = []
        else:
            fields = line.split(sep)
            if (len(fields) < len(names)):
                raise ValueError(('Too few fields (%d) for %r\n%s' % (len(fields), names, line)))
            item = {'F': [], }
            for i in range(len(names)):
                item[names[i]] = fields[i]
            X.append(item)
