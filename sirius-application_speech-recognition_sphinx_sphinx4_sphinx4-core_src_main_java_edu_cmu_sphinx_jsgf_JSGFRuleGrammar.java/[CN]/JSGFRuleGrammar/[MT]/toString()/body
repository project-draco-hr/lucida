{
  StringBuilder sb=new StringBuilder();
  sb.append("#JSGF V1.0;").append(LINE_SEPARATOR);
  sb.append(LINE_SEPARATOR);
  sb.append(formatComment(grammarDocComment));
  sb.append(LINE_SEPARATOR);
  sb.append("grammar ").append(name).append(';').append(LINE_SEPARATOR);
  sb.append(LINE_SEPARATOR);
  Set<Object> docComments=importDocComments.keySet();
  for (int i=0; i < imports.size(); i++) {
    String curImport='<' + imports.get(i).getRuleName() + '>';
    if (docComments.contains(curImport)) {
      sb.append(formatComment((String)importDocComments.get(curImport)));
      sb.append(LINE_SEPARATOR);
      sb.append("import ").append(curImport + ';').append(LINE_SEPARATOR);
      sb.append(LINE_SEPARATOR);
    }
  }
  docComments=ruleDocComments.keySet();
  for (  Map.Entry<String,JSGFRuleState> entry : rules.entrySet()) {
    Object rule=entry.getKey();
    if ((docComments.size() > 0) && docComments.contains(rule)) {
      sb.append(formatComment((String)ruleDocComments.get(rule))).append(LINE_SEPARATOR);
    }
    JSGFRuleState state=entry.getValue();
    if (state.isPublic) {
      sb.append("public ");
    }
    sb.append('<').append(rule).append("> = ").append(state.rule).append(';').append(LINE_SEPARATOR);
    sb.append(LINE_SEPARATOR);
  }
  return sb.toString();
}
