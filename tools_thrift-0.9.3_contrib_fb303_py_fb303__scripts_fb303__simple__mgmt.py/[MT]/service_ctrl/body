def service_ctrl(command, port, trans_factory=None, prot_factory=None):
    "\n    service_ctrl is a generic function to execute standard fb303 functions\n\n    @param command: one of stop, start, reload, status, counters, name, alive\n    @param port: service's port\n    @param trans_factory: TTransportFactory to use for obtaining a TTransport. Default is\n                          TBufferedTransportFactory\n    @param prot_factory: TProtocolFactory to use for obtaining a TProtocol. Default is\n                         TBinaryProtocolFactory\n    "
    if (command in ['status']):
        try:
            status = fb303_wrapper('status', port, trans_factory, prot_factory)
            status_details = fb303_wrapper('get_status_details', port, trans_factory, prot_factory)
            msg = fb_status_string(status)
            if len(status_details):
                msg += (' - %s' % status_details)
            print msg
            if (status == fb_status.ALIVE):
                return 2
            else:
                return 3
        except:
            print 'Failed to get status'
            return 3
    if (command in ['version', 'alive', 'name']):
        try:
            result = fb303_wrapper(command, port, trans_factory, prot_factory)
            print result
            return 0
        except:
            print 'failed to get ', command
            return 3
    if (command in ['counters']):
        try:
            counters = fb303_wrapper('counters', port, trans_factory, prot_factory)
            for counter in counters:
                print ('%s: %d' % (counter, counters[counter]))
            return 0
        except:
            print 'failed to get counters'
            return 3
    if (os.getuid() == 0):
        if (command in ['stop', 'reload']):
            try:
                fb303_wrapper(command, port, trans_factory, prot_factory)
                return 0
            except:
                print 'failed to tell the service to ', command
                return 3
    elif (command in ['stop', 'reload']):
        print 'root privileges are required to stop or reload the service.'
        return 4
    print 'The following commands are available:'
    for command in ['counters', 'name', 'version', 'alive', 'status']:
        print ('\t%s' % command)
    print 'The following commands are available for users with root privileges:'
    for command in ['stop', 'reload']:
        print ('\t%s' % command)
    return 0
