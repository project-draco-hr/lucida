{
  List<Result> filtered=new ArrayList<Result>();
  results=(new ScoreSorterFilter()).apply(results);
  List<Result> factoids=new ArrayList<Result>();
  Hashtable<String,Hashtable<String,Result>> allExtractors=new Hashtable<String,Hashtable<String,Result>>();
  for (  Result result : results) {
    if (result.getScore() <= 0 || result.getScore() == Float.POSITIVE_INFINITY) {
      filtered.add(result);
      continue;
    }
    String[] extractors=result.getExtractionTechniques();
    if (extractors == null || extractors.length != 1) {
      filtered.add(result);
      continue;
    }
    String extractor=extractors[0];
    factoids.add(result);
    Hashtable<String,Result> sameExtractor=allExtractors.get(extractor);
    if (sameExtractor == null) {
      sameExtractor=new Hashtable<String,Result>();
      allExtractors.put(extractor,sameExtractor);
    }
    String norm=StringUtils.normalize(result.getAnswer());
    sameExtractor.put(norm,result);
  }
  String[] extractors=allExtractors.keySet().toArray(new String[allExtractors.size()]);
  Set<String> covered=new HashSet<String>();
  for (  Result result : factoids) {
    String norm=StringUtils.normalize(result.getAnswer());
    if (!covered.add(norm))     continue;
    ArrayList<String> exs=new ArrayList<String>();
    ArrayList<Float> scores=new ArrayList<Float>();
    for (    String extractor : extractors) {
      Result r=allExtractors.get(extractor).get(norm);
      if (r != null) {
        exs.add(extractor);
        scores.add(r.getNormScore());
      }
    }
    result.setExtractionTechniques(exs.toArray(new String[exs.size()]));
    float[] scoresA=new float[scores.size()];
    for (int i=0; i < scoresA.length; i++)     scoresA[i]=scores.get(i);
    int totalExtractors=extractors.length;
    float combinedScore=combMNZ(scoresA,totalExtractors);
    result.setScore(combinedScore);
    result.setNormScore(combinedScore);
    filtered.add(result);
  }
  return filtered.toArray(new Result[filtered.size()]);
}
