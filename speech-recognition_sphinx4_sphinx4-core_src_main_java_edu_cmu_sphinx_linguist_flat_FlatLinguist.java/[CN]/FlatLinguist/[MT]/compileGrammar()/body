{
  initialGrammarState=grammar.getInitialNode();
  nodeStateMap=new HashMap<GrammarNode,GState>();
  arcPool=new Cache<SentenceHMMStateArc>();
  List<GState> gstateList=new ArrayList<GState>();
  TimerPool.getTimer(this,"Compile").start();
  TimerPool.getTimer(this,"Create States").start();
  for (  GrammarNode grammarNode : grammar.getGrammarNodes()) {
    GState gstate=createGState(grammarNode);
    gstateList.add(gstate);
  }
  TimerPool.getTimer(this,"Create States").stop();
  addStartingPath();
  TimerPool.getTimer(this,"Collect Contexts").start();
  for (  GState gstate : gstateList)   gstate.collectContexts();
  TimerPool.getTimer(this,"Collect Contexts").stop();
  TimerPool.getTimer(this,"Expand States").start();
  for (  GState gstate : gstateList)   gstate.expand();
  TimerPool.getTimer(this,"Expand States").stop();
  TimerPool.getTimer(this,"Connect Nodes").start();
  for (  GState gstate : gstateList)   gstate.connect();
  TimerPool.getTimer(this,"Connect Nodes").stop();
  SentenceHMMState initialState=findStartingState();
  if (addOutOfGrammarBranch) {
    CIPhoneLoop phoneLoop=new CIPhoneLoop(phoneLoopAcousticModel,logPhoneInsertionProbability);
    SentenceHMMState firstBranchState=(SentenceHMMState)phoneLoop.getSearchGraph().getInitialState();
    initialState.connect(getArc(firstBranchState,logOne,logOutOfGrammarBranchProbability));
  }
  searchGraph=new FlatSearchGraph(initialState);
  TimerPool.getTimer(this,"Compile").stop();
  if (dumpGStates) {
    for (    GrammarNode grammarNode : grammar.getGrammarNodes()) {
      GState gstate=getGState(grammarNode);
      gstate.dumpInfo();
    }
  }
  nodeStateMap=null;
  arcPool=null;
  return SentenceHMMState.collectStates(initialState);
}
