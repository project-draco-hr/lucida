{
  EphyraTREC13To16 ephyra=new EphyraTREC13To16();
  boolean firstThreshold=true;
  float fAbsThresh=FACTOID_ABS_THRESH;
  float lRelThresh=LIST_REL_THRESH;
  for (  TRECTarget target : targets) {
    MsgPrinter.printTarget(target.getTargetDesc());
    if (firstThreshold)     TargetPreprocessor.preprocess(target);
    String targetDesc=target.getTargetDesc();
    String condensedTarget=target.getCondensedTarget();
    TRECQuestion[] questions=target.getQuestions();
    QuestionAnalysis.setContext(condensedTarget);
    for (int i=0; i < questions.length; i++) {
      MsgPrinter.printQuestion(questions[i].getQuestionString());
      String id=questions[i].getId();
      String type=questions[i].getType();
      String qs;
      if (type.equals("FACTOID") || type.equals("LIST")) {
        if (firstThreshold) {
          MsgPrinter.printResolvingCoreferences();
          CorefResolver.resolvePronounsToTarget(target,i);
        }
        qs=questions[i].getQuestionString();
      }
 else {
        qs=targetDesc;
      }
      OverlapAnalysisFilter.setPattern(null);
      if (type.equals("FACTOID")) {
        for (        TRECPattern pattern : factoidPatterns) {
          if (pattern.getId().equals(id)) {
            OverlapAnalysisFilter.setPattern(pattern);
            break;
          }
        }
      }
      Result[] results=null;
      if ((type.equals("FACTOID") && factoidLog) || (type.equals("LIST") && listLog) || (type.equals("OTHER") && otherLog)) {
        results=TREC13To16Parser.loadResults(qs,type,inputLogFile);
      }
      if (results == null) {
        if (type.equals("FACTOID")) {
          Logger.logFactoidStart(qs);
          results=ephyra.askFactoid(qs,FACTOID_MAX_ANSWERS,FACTOID_ABS_THRESH);
          Logger.logResults(results);
          Logger.logFactoidEnd();
        }
 else         if (type.equals("LIST")) {
          Logger.logListStart(qs);
          results=ephyra.askList(qs,LIST_REL_THRESH);
          Logger.logResults(results);
          Logger.logListEnd();
        }
 else {
          Logger.logDefinitionalStart(qs);
          results=ephyra.askOther(target);
          Logger.logResults(results);
          Logger.logDefinitionalEnd();
        }
      }
      boolean[] correct=null;
      if (type.equals("FACTOID") && factoidPatterns != null)       correct=evalFactoidQuestion(id,results,fAbsThresh);
 else       if (type.equals("LIST") && listPatterns != null)       correct=evalListQuestion(id,results,lRelThresh);
      TRECAnswer[] answers=new TRECAnswer[results.length];
      for (int j=0; j < results.length; j++) {
        String answer=results[j].getAnswer();
        String supportDoc=results[j].getDocID();
        answers[j]=new TRECAnswer(id,answer,supportDoc);
      }
      questions[i].setAnswers(answers);
      if (results.length > 0) {
        QuestionInterpretation qi=results[0].getQuery().getInterpretation();
        if (qi != null)         questions[i].setInterpretation(qi);
      }
      if (answers.length == 0) {
        answers=new TRECAnswer[1];
        if (type.equals("FACTOID"))         answers[0]=new TRECAnswer(id,null,"NIL");
 else         answers[0]=new TRECAnswer(id,"No answers found.","XIE19960101.0001");
      }
      TREC13To16Parser.saveAnswers("log/" + runTag,answers,correct,runTag);
    }
    if (factoidPatterns != null)     evalFactoidTarget();
    if (listPatterns != null)     evalListTarget();
  }
  if (factoidPatterns != null)   evalFactoidTotal(fAbsThresh);
  if (listPatterns != null)   evalListTotal(lRelThresh);
  firstThreshold=false;
}
