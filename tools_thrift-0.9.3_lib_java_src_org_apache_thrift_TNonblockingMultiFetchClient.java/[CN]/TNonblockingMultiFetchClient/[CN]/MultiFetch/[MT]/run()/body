{
  long t1=System.currentTimeMillis();
  int numTotalServers=servers.size();
  stats.setNumTotalServers(numTotalServers);
  recvBuf=new ByteBuffer[numTotalServers];
  ByteBuffer sendBuf[]=new ByteBuffer[numTotalServers];
  long numBytesRead[]=new long[numTotalServers];
  int frameSize[]=new int[numTotalServers];
  boolean hasReadFrameSize[]=new boolean[numTotalServers];
  try {
    selector=Selector.open();
  }
 catch (  IOException e) {
    LOGGER.error("selector opens error: " + e.toString());
    return;
  }
  for (int i=0; i < numTotalServers; i++) {
    sendBuf[i]=requestBuf.duplicate();
    recvBuf[i]=ByteBuffer.allocate(4);
    stats.incTotalRecvBufBytes(4);
    InetSocketAddress server=servers.get(i);
    SocketChannel s=null;
    SelectionKey key=null;
    try {
      s=SocketChannel.open();
      s.configureBlocking(false);
      s.connect(server);
      key=s.register(selector,s.validOps());
      key.attach(i);
    }
 catch (    Exception e) {
      stats.incNumConnectErrorServers();
      String err=String.format("set up socket to server %s error: %s",server.toString(),e.toString());
      LOGGER.error(err);
      if (s != null) {
        try {
          s.close();
        }
 catch (        Exception ex) {
        }
      }
      if (key != null) {
        key.cancel();
      }
    }
  }
  while (stats.getNumReadCompletedServers() + stats.getNumConnectErrorServers() < stats.getNumTotalServers()) {
    if (Thread.currentThread().isInterrupted()) {
      return;
    }
    try {
      selector.select();
    }
 catch (    Exception e) {
      LOGGER.error("selector selects error: " + e.toString());
      continue;
    }
    Iterator<SelectionKey> it=selector.selectedKeys().iterator();
    while (it.hasNext()) {
      SelectionKey selKey=it.next();
      it.remove();
      int index=(Integer)selKey.attachment();
      if (selKey.isValid() && selKey.isConnectable()) {
        try {
          SocketChannel sChannel=(SocketChannel)selKey.channel();
          sChannel.finishConnect();
        }
 catch (        Exception e) {
          stats.incNumConnectErrorServers();
          String err=String.format("socket %d connects to server %s " + "error: %s",index,servers.get(index).toString(),e.toString());
          LOGGER.error(err);
        }
      }
      if (selKey.isValid() && selKey.isWritable()) {
        if (sendBuf[index].hasRemaining()) {
          try {
            SocketChannel sChannel=(SocketChannel)selKey.channel();
            sChannel.write(sendBuf[index]);
          }
 catch (          Exception e) {
            String err=String.format("socket %d writes to server %s " + "error: %s",index,servers.get(index).toString(),e.toString());
            LOGGER.error(err);
          }
        }
      }
      if (selKey.isValid() && selKey.isReadable()) {
        try {
          SocketChannel sChannel=(SocketChannel)selKey.channel();
          int bytesRead=sChannel.read(recvBuf[index]);
          if (bytesRead > 0) {
            numBytesRead[index]+=bytesRead;
            if (!hasReadFrameSize[index] && recvBuf[index].remaining() == 0) {
              frameSize[index]=recvBuf[index].getInt(0);
              if (frameSize[index] <= 0) {
                stats.incNumInvalidFrameSize();
                String err=String.format("Read an invalid frame size %d" + " from %s. Does the server use TFramedTransport? ",frameSize[index],servers.get(index).toString());
                LOGGER.error(err);
                sChannel.close();
                continue;
              }
              if (frameSize[index] + 4 > stats.getMaxResponseBytes()) {
                stats.setMaxResponseBytes(frameSize[index] + 4);
              }
              if (frameSize[index] + 4 > maxRecvBufBytesPerServer) {
                stats.incNumOverflowedRecvBuf();
                String err=String.format("Read frame size %d from %s," + " total buffer size would exceed limit %d",frameSize[index],servers.get(index).toString(),maxRecvBufBytesPerServer);
                LOGGER.error(err);
                sChannel.close();
                continue;
              }
              recvBuf[index]=ByteBuffer.allocate(frameSize[index] + 4);
              recvBuf[index].putInt(frameSize[index]);
              stats.incTotalRecvBufBytes(frameSize[index]);
              hasReadFrameSize[index]=true;
            }
            if (hasReadFrameSize[index] && numBytesRead[index] >= frameSize[index] + 4) {
              sChannel.close();
              stats.incNumReadCompletedServers();
              long t2=System.currentTimeMillis();
              stats.setReadTime(t2 - t1);
            }
          }
        }
 catch (        Exception e) {
          String err=String.format("socket %d reads from server %s " + "error: %s",index,servers.get(index).toString(),e.toString());
          LOGGER.error(err);
        }
      }
    }
  }
}
