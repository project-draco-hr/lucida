def serve(self):

    def try_close(file):
        try:
            file.close()
        except IOError as e:
            logger.warning(e, exc_info=True)
    self.serverTransport.listen()
    while True:
        client = self.serverTransport.accept()
        if (not client):
            continue
        try:
            pid = os.fork()
            if pid:
                self.children.append(pid)
                self.collect_children()
                itrans = self.inputTransportFactory.getTransport(client)
                otrans = self.outputTransportFactory.getTransport(client)
                try_close(itrans)
                try_close(otrans)
            else:
                itrans = self.inputTransportFactory.getTransport(client)
                otrans = self.outputTransportFactory.getTransport(client)
                iprot = self.inputProtocolFactory.getProtocol(itrans)
                oprot = self.outputProtocolFactory.getProtocol(otrans)
                ecode = 0
                try:
                    try:
                        while True:
                            self.processor.process(iprot, oprot)
                    except TTransport.TTransportException as tx:
                        pass
                    except Exception as e:
                        logger.exception(e)
                        ecode = 1
                finally:
                    try_close(itrans)
                    try_close(otrans)
                os._exit(ecode)
        except TTransport.TTransportException as tx:
            pass
        except Exception as x:
            logger.exception(x)
