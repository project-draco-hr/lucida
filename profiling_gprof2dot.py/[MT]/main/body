def main():
    'Main program.'
    global totalMethod
    formatNames = list(formats.keys())
    formatNames.sort()
    optparser = optparse.OptionParser(usage='\n\t%prog [options] [file] ...')
    optparser.add_option('-o', '--output', metavar='FILE', type='string', dest='output', help='output filename [stdout]')
    optparser.add_option('-n', '--node-thres', metavar='PERCENTAGE', type='float', dest='node_thres', default=0.5, help='eliminate nodes below this threshold [default: %default]')
    optparser.add_option('-e', '--edge-thres', metavar='PERCENTAGE', type='float', dest='edge_thres', default=0.1, help='eliminate edges below this threshold [default: %default]')
    optparser.add_option('-f', '--format', type='choice', choices=formatNames, dest='format', default='prof', help=('profile format: %s [default: %%default]' % naturalJoin(formatNames)))
    optparser.add_option('--total', type='choice', choices=('callratios', 'callstacks'), dest='totalMethod', default=totalMethod, help='preferred method of calculating total time: callratios or callstacks (currently affects only perf format) [default: %default]')
    optparser.add_option('-c', '--colormap', type='choice', choices=('color', 'pink', 'gray', 'bw', 'print'), dest='theme', default='color', help='color map: color, pink, gray, bw, or print [default: %default]')
    optparser.add_option('-s', '--strip', action='store_true', dest='strip', default=False, help='strip function parameters, template parameters, and const modifiers from demangled C++ function names')
    optparser.add_option('-w', '--wrap', action='store_true', dest='wrap', default=False, help='wrap function names')
    optparser.add_option('--show-samples', action='store_true', dest='show_samples', default=False, help='show function samples')
    optparser.add_option('-z', '--root', type='string', dest='root', default='', help='prune call graph to show only descendants of specified root function')
    optparser.add_option('-l', '--leaf', type='string', dest='leaf', default='', help='prune call graph to show only ancestors of specified leaf function')
    optparser.add_option('--skew', type='float', dest='theme_skew', default=1.0, help='skew the colorization curve.  Values < 1.0 give more variety to lower percentages.  Values > 1.0 give less variety to lower percentages')
    (options, args) = optparser.parse_args(sys.argv[1:])
    if ((len(args) > 1) and (options.format != 'pstats')):
        optparser.error('incorrect number of arguments')
    try:
        theme = themes[options.theme]
    except KeyError:
        optparser.error(("invalid colormap '%s'" % options.theme))
    if options.theme_skew:
        theme.skew = options.theme_skew
    totalMethod = options.totalMethod
    try:
        Format = formats[options.format]
    except KeyError:
        optparser.error(("invalid format '%s'" % options.format))
    if Format.stdinInput:
        if (not args):
            fp = sys.stdin
        else:
            fp = open(args[0], 'rt')
        parser = Format(fp)
    elif Format.multipleInput:
        if (not args):
            optparser.error(('at least a file must be specified for %s input' % options.format))
        parser = Format(*args)
    else:
        if (len(args) != 1):
            optparser.error(('exactly one file must be specified for %s input' % options.format))
        parser = Format(args[0])
    profile = parser.parse()
    if (options.output is None):
        output = sys.stdout
    elif PYTHON_3:
        output = open(options.output, 'wt', encoding='UTF-8')
    else:
        output = open(options.output, 'wt')
    dot = DotWriter(output)
    dot.strip = options.strip
    dot.wrap = options.wrap
    if options.show_samples:
        dot.show_function_events.append(SAMPLES)
    profile = profile
    profile.prune((options.node_thres / 100.0), (options.edge_thres / 100.0))
    if options.root:
        rootId = profile.getFunctionId(options.root)
        if (not rootId):
            sys.stderr.write((('root node ' + options.root) + ' not found (might already be pruned : try -e0 -n0 flags)\n'))
            sys.exit(1)
        profile.prune_root(rootId)
    if options.leaf:
        leafId = profile.getFunctionId(options.leaf)
        if (not leafId):
            sys.stderr.write((('leaf node ' + options.leaf) + ' not found (maybe already pruned : try -e0 -n0 flags)\n'))
            sys.exit(1)
        profile.prune_leaf(leafId)
    dot.graph(profile, theme)
