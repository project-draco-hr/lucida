{
  if (languagePair == null)   throw new Exception("Langauage pair must be set before calling initialize");
  if (properties == null) {
    properties=Properties.loadFromClassName(this.getClass().getName());
    properties=properties.mapProperties().get(languagePair.getFirst() + "_" + languagePair.getSecond());
    extractor=FeatureExtractorFactory.getInstance(languagePair.getFirst());
  }
  trainingFile=properties.getProperty("trainingFile");
  testingFile=properties.getProperty("testingFile");
  crossValidationFolds=Integer.parseInt(properties.getProperty("crossValidationFolds"));
  learnerNames=properties.getProperty("learners").split(",");
  for (int i=0; i < learnerNames.length; i++) {
    learnerNames[i]=learnerNames[i].trim();
  }
  useClassLevels=Boolean.parseBoolean(properties.getProperty("useClassLevels"));
  if (!useClassLevels && learnerNames.length > 1) {
    String[] newArr=new String[1];
    learnerNames=Arrays.asList(learnerNames).subList(0,1).toArray(newArr);
  }
  classLabels=new HashSet<String>();
  String[] labels=properties.getProperty("classLabels").split(",");
  for (int i=0; i < labels.length; i++) {
    labels[i]=HierarchicalClassifier.getHierarchicalClassName(labels[i],learnerNames.length,useClassLevels);
    classLabels.add(labels[i]);
  }
  featureTypes=new HashSet<String>();
  String[] types=properties.getProperty("featureTypes").split(",");
  for (int i=0; i < types.length; i++) {
    featureTypes.add(types[i].trim());
  }
  classifierDir=properties.getProperty("classifierDir");
  trainingSet=makeDataset(trainingFile);
  if (crossValidationFolds < 0) {
    testingSet=makeDataset(testingFile);
  }
}
