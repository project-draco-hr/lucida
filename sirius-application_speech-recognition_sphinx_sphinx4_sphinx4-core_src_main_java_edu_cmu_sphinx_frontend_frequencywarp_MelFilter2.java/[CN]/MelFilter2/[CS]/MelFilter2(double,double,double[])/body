{
  int lastIndex=0;
  int firstIndex=melPoints.length;
  double left=center - delta;
  double right=center + delta;
  double[] heights=new double[melPoints.length];
  for (int i=0; i < heights.length; ++i) {
    if (left < melPoints[i] && melPoints[i] <= center) {
      heights[i]=(melPoints[i] - left) / (center - left);
      firstIndex=Math.min(i,firstIndex);
      lastIndex=i;
    }
    if (center < melPoints[i] && melPoints[i] < right) {
      heights[i]=(right - melPoints[i]) / (right - center);
      lastIndex=i;
    }
  }
  offset=firstIndex;
  weights=copyOfRange(heights,firstIndex,lastIndex + 1);
}
