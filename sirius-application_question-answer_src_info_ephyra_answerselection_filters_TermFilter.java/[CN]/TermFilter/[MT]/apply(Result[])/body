{
  HashMap<String,Integer> termCounters=new HashMap<String,Integer>();
  for (  Result r : results) {
    String text=r.getAnswer();
    String[] sentence=NETagger.tokenize(text);
    for (int i=0; i < sentence.length; i++) {
      String term=SnowballStemmer.stem(sentence[i].toLowerCase());
      if (term.length() > 1) {
        Integer count=(termCounters.containsKey(term) ? termCounters.get(term) : new Integer(0));
        termCounters.put(term,new Integer(count.intValue() + 1));
      }
    }
  }
  ArrayList<Result> rawResults=new ArrayList<Result>();
  HashSet<String> found=new HashSet<String>();
  found.addAll(previousResultTerms);
  for (  Result r : results) {
    if (r.getScore() != Float.NEGATIVE_INFINITY) {
      String text=r.getAnswer();
      String[] sentence=NETagger.tokenize(text);
      int numberOfTerms=0;
      int numberOfKeyTerms=0;
      HashSet<String> resFound=new HashSet<String>();
      for (int i=0; i < sentence.length; i++) {
        String term=SnowballStemmer.stem(sentence[i].toLowerCase());
        if (!found.contains(term) && !resFound.contains(term)) {
          resFound.add(term);
          Integer count=(termCounters.containsKey(term) ? termCounters.get(term) : new Integer(0));
          if (count.intValue() > (results.length / 100))           if ((term.length() > 1) && !StringUtils.isSubsetKeywords(term,r.getQuery().getAnalyzedQuestion().getQuestion()) && !FunctionWords.lookup(term))           numberOfKeyTerms++;
          if ((term.length() > 1) && !StringUtils.isSubsetKeywords(term,r.getQuery().getAnalyzedQuestion().getQuestion()) && !FunctionWords.lookup(term))           numberOfTerms++;
        }
      }
      if (numberOfTerms != 0) {
        rawResults.add(r);
      }
    }
  }
  return rawResults.toArray(new Result[rawResults.size()]);
}
