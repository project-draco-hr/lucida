{
  GrammarNode currNode=branchNode;
  for (int i=-1; i < wordGrammarNodes.size(); i++) {
    if (i > -1) {
      currNode=wordGrammarNodes.get(i);
    }
    for (int j=i + 2; j < Math.min(wordGrammarNodes.size(),i + wordSkipRange); j++) {
      GrammarNode jumpNode=wordGrammarNodes.get(j);
      currNode.add(jumpNode,logMath.linearToLog(wordSkipProbability));
    }
  }
  for (int i=wordGrammarNodes.size() - wordSkipRange; i < wordGrammarNodes.size() - 1; i++) {
    int j=wordGrammarNodes.size();
    currNode=wordGrammarNodes.get(i);
    currNode.add(finalNode,logMath.linearToLog(wordSkipProbability * Math.pow(Math.E,j - i)));
  }
}
