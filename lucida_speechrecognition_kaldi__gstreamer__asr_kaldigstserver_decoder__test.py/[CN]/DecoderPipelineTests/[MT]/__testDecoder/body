def __testDecoder(self):
    finished = [False]

    def do_shit():
        decoder_pipeline.init_request('test0', 'audio/x-raw, layout=(string)interleaved, rate=(int)16000, format=(string)S16LE, channels=(int)1')
        f = open('test/data/1234-5678.raw', 'rb')
        for block in iter((lambda : f.read(8000)), ''):
            time.sleep(0.25)
            decoder_pipeline.process_data(block)
        decoder_pipeline.end_request()
    do_shit()
    while (not finished[0]):
        time.sleep(1)
    self.assertEqual(['\xc3\xbcks', 'kaks', 'kolm', 'neli', '<#s>', 'viis', 'kuus', 'seitse', 'kaheksa', '<#s>'], words)
    words = []
    finished[0] = False
    do_shit()
    while (not finished[0]):
        time.sleep(1)
    self.assertItemsEqual(['see', 'on', 'teine', 'lause', '<#s>'], words, 'Recognition result')
    words = []
    decoder_pipeline.init_request('test0', 'audio/x-raw, layout=(string)interleaved, rate=(int)16000, format=(string)S16LE, channels=(int)1')
    f = open('test/data/etteytlus.raw', 'rb')
    decoder_pipeline.process_data(f.read())
    time.sleep(3)
    decoder_pipeline.cancel()
    print 'Pipeline cancelled'
    words = []
    finished[0] = False
    decoder_pipeline.init_request('test0', 'audio/x-raw, layout=(string)interleaved, rate=(int)16000, format=(string)S16LE, channels=(int)1')
    f = open('test/data/lause2.raw', 'rb')
    decoder_pipeline.process_data(f.read((10 * 16000)))
    decoder_pipeline.end_request()
    while (not finished[0]):
        time.sleep(1)
    self.assertItemsEqual(['see', 'on', 'teine', 'lause', '<#s>'], words, 'Recognition result')
    decoder_pipeline.init_request('test0', 'audio/x-raw, layout=(string)interleaved, rate=(int)16000, format=(string)S16LE, channels=(int)1')
    decoder_pipeline.cancel()
    print 'Pipeline cancelled'
    words = []
    finished[0] = False
    decoder_pipeline.init_request('test0', 'audio/x-wav')
    f = open('test/data/lause2.wav', 'rb')
    decoder_pipeline.process_data(f.read())
    decoder_pipeline.end_request()
    while (not finished[0]):
        time.sleep(1)
    self.assertItemsEqual(['see', 'on', 'teine', 'lause', '<#s>'], words, 'Recognition result')
    words = []
    finished[0] = False
    decoder_pipeline.init_request('test0', 'audio/ogg')
    f = open('test/data/test_2lauset.ogg', 'rb')
    decoder_pipeline.process_data(f.read((10 * 16000)))
    decoder_pipeline.end_request()
    while (not finished[0]):
        time.sleep(1)
    self.assertItemsEqual('see on esimene lause <#s> see on teine lause <#s>'.split(), words, 'Recognition result')
