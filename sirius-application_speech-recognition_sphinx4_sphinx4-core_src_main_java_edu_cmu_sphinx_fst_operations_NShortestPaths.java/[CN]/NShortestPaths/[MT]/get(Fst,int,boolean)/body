{
  if (fst == null) {
    return null;
  }
  if (fst.getSemiring() == null) {
    return null;
  }
  Fst fstdet=fst;
  if (determinize) {
    fstdet=Determinize.get(fst);
  }
  final Semiring semiring=fstdet.getSemiring();
  Fst res=new Fst(semiring);
  res.setIsyms(fstdet.getIsyms());
  res.setOsyms(fstdet.getOsyms());
  final float[] d=shortestDistance(fstdet);
  ExtendFinal.apply(fstdet);
  int[] r=new int[fstdet.getNumStates()];
  PriorityQueue<Pair<State,Float>> queue=new PriorityQueue<Pair<State,Float>>(10,new Comparator<Pair<State,Float>>(){
    public int compare(    Pair<State,Float> o1,    Pair<State,Float> o2){
      float previous=o1.getRight();
      float d1=d[o1.getLeft().getId()];
      float next=o2.getRight();
      float d2=d[o2.getLeft().getId()];
      float a1=semiring.times(next,d2);
      float a2=semiring.times(previous,d1);
      if (semiring.naturalLess(a1,a2))       return 1;
      if (a1 == a2)       return 0;
      return -1;
    }
  }
);
  HashMap<Pair<State,Float>,Pair<State,Float>> previous=new HashMap<Pair<State,Float>,Pair<State,Float>>(fst.getNumStates());
  HashMap<Pair<State,Float>,State> stateMap=new HashMap<Pair<State,Float>,State>(fst.getNumStates());
  State start=fstdet.getStart();
  Pair<State,Float> item=new Pair<State,Float>(start,semiring.one());
  queue.add(item);
  previous.put(item,null);
  while (!queue.isEmpty()) {
    Pair<State,Float> pair=queue.remove();
    State p=pair.getLeft();
    Float c=pair.getRight();
    State s=new State(p.getFinalWeight());
    res.addState(s);
    stateMap.put(pair,s);
    if (previous.get(pair) == null) {
      res.setStart(s);
    }
 else {
      State previouState=stateMap.get(previous.get(pair));
      State previousOldState=previous.get(pair).getLeft();
      for (int j=0; j < previousOldState.getNumArcs(); j++) {
        Arc a=previousOldState.getArc(j);
        if (a.getNextState().equals(p)) {
          previouState.addArc(new Arc(a.getIlabel(),a.getOlabel(),a.getWeight(),s));
        }
      }
    }
    Integer stateIndex=p.getId();
    r[stateIndex]++;
    if ((r[stateIndex] == n) && (p.getFinalWeight() != semiring.zero())) {
      break;
    }
    if (r[stateIndex] <= n) {
      for (int j=0; j < p.getNumArcs(); j++) {
        Arc a=p.getArc(j);
        float cnew=semiring.times(c,a.getWeight());
        Pair<State,Float> next=new Pair<State,Float>(a.getNextState(),cnew);
        previous.put(next,pair);
        queue.add(next);
      }
    }
  }
  return res;
}
