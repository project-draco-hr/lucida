def process_file(in_file, out_file, options):
    '\n    Read thrift profile output from the specified input file, and print\n    prettier information on the output file.\n    '
    virt_call_regex = re.compile('^\\s*T_VIRTUAL_CALL: (\\d+) calls on (.*):$')
    gen_prot_regex = re.compile('^\\s*T_GENERIC_PROTOCOL: (\\d+) calls to (.*) with a (.*):$')
    bt_regex = re.compile('^\\s*#(\\d+)\\s*(.*) \\[(0x[0-9A-Za-z]+)\\]$')
    entries = []
    current_entry = None
    while True:
        line = in_file.readline()
        if (not line):
            break
        if ((line == '\n') or line.startswith('Thrift virtual call info:')):
            continue
        virt_call_match = virt_call_regex.match(line)
        if virt_call_match:
            num_calls = int(virt_call_match.group(1))
            type_name = virt_call_match.group(2)
            if options.cxxfilt:
                type_name = ('_Z' + type_name)
            header = ('T_VIRTUAL_CALL: %d calls on "%s"' % (num_calls, type_name))
            if (current_entry is not None):
                entries.append(current_entry)
            current_entry = Entry(header)
            continue
        gen_prot_match = gen_prot_regex.match(line)
        if gen_prot_match:
            num_calls = int(gen_prot_match.group(1))
            type_name1 = gen_prot_match.group(2)
            type_name2 = gen_prot_match.group(3)
            if options.cxxfilt:
                type_name1 = ('_Z' + type_name1)
                type_name2 = ('_Z' + type_name2)
            header = ('T_GENERIC_PROTOCOL: %d calls to "%s" with a "%s"' % (num_calls, type_name1, type_name2))
            if (current_entry is not None):
                entries.append(current_entry)
            current_entry = Entry(header)
            continue
        bt_match = bt_regex.match(line)
        if bt_match:
            if (current_entry is None):
                raise Exception('found backtrace frame before entry header')
            frame_num = int(bt_match.group(1))
            filename = bt_match.group(2)
            address = bt_match.group(3)
            current_entry.addFrame(filename, address)
            continue
        raise Exception(('unexpected line in input: %r' % (line,)))
    if (current_entry is not None):
        entries.append(current_entry)
        current_entry = None
    lookup_addresses(options)
    for entry in entries:
        entry.write(out_file, options)
        out_file.write('\n')
