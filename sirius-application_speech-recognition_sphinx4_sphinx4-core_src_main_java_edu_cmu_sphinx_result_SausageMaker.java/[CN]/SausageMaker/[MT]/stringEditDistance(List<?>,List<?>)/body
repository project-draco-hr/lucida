{
  if (p1.isEmpty()) {
    return p2.size();
  }
  if (p2.isEmpty()) {
    return p1.size();
  }
  int[][] distances=new int[p1.size() + 1][p2.size() + 1];
  for (int i=0; i <= p1.size(); i++) {
    distances[i][0]=i;
  }
  for (int j=0; j <= p2.size(); j++) {
    distances[0][j]=j;
  }
  for (int i=1; i <= p1.size(); i++) {
    for (int j=1; j <= p2.size(); j++) {
      int min=Math.min(distances[i - 1][j - 1] + (p1.get(i - 1).equals(p2.get(j - 1)) ? 0 : 1),distances[i - 1][j] + 1);
      min=Math.min(min,distances[i][j - 1] + 1);
      distances[i][j]=min;
    }
  }
  return distances[p1.size()][p2.size()];
}
