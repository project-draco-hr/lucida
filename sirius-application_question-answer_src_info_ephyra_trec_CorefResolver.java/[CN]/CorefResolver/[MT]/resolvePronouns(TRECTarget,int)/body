{
  String currentTarget=target.getCondensedTarget();
  TRECQuestion[] questions=target.getQuestions();
  String currentQuestionString=questions[next].getQuestionString();
  String currentTargetGen=null;
  String rest=null;
  String[] tokens=OpenNLP.tokenize(currentTarget);
  int exp=0;
  boolean targetPerson=false;
  boolean targetThing=false;
  if (currentTarget.endsWith("s")) {
    currentTargetGen=currentTarget.concat("'");
  }
 else {
    currentTargetGen=currentTarget.concat("'s");
  }
  String[] targetTypes=target.getTargetTypes();
  if ((targetTypes.length == 1) && (targetTypes[0] == "PERSON")) {
    targetPerson=true;
  }
  if ((targetTypes.length != 4) && ((targetTypes[0] != "PERSON") || (targetTypes[1] != "PERSON") || (targetTypes[2] != "PERSON"))) {
    targetThing=true;
  }
  Matcher sgpers=singularThirdPersonPronounPattern.matcher(currentQuestionString);
  Matcher sgthing=singularThirdThingPronounPattern.matcher(currentQuestionString);
  Matcher plpers=pluralThirdPersonPronounPattern.matcher(currentQuestionString);
  Matcher sgposs=singularThirdPersonPronounPatternGen.matcher(currentQuestionString);
  Matcher sgthingposs=singularThirdThingPronounPatternGen.matcher(currentQuestionString);
  Matcher plposs=pluralThirdPersonPronounPatternGen.matcher(currentQuestionString);
  Matcher her=singularThirdPersonPronounPatternAmb.matcher(currentQuestionString);
  Matcher sgdem=singularDemPronounPattern.matcher(currentQuestionString);
  Matcher pldem=pluralDemPronounPattern.matcher(currentQuestionString);
  if (sgposs.matches()) {
    exp=2;
    if ((!targetThing) || (next == 0)) {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounStringGen,currentTargetGen);
    }
 else {
      if (usePreviousAnswer(questions,next,exp) != null) {
        currentTarget=usePreviousAnswer(questions,next,exp);
      }
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounStringGen,currentTargetGen);
    }
  }
  if (sgthingposs.matches()) {
    exp=1;
    if ((!targetPerson) || (next == 0)) {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdThingPronounStringGen,currentTargetGen);
    }
 else {
      if (usePreviousAnswer(questions,next,exp) != null) {
        currentTarget=usePreviousAnswer(questions,next,exp);
      }
      currentQuestionString=currentQuestionString.replaceAll(singularThirdThingPronounStringGen,currentTargetGen);
    }
  }
  if (plposs.matches()) {
    currentQuestionString=currentQuestionString.replaceAll(pluralThirdPersonPronounStringGen,currentTargetGen);
  }
  if (her.matches()) {
    rest=currentQuestionString.substring(currentQuestionString.indexOf(her.group(2)) + her.group(2).length() + 1).toLowerCase();
    String[] questionTokens=OpenNLP.tokenize(rest);
    String[] pos=OpenNLP.tagPos(questionTokens);
    if (pos[0].equalsIgnoreCase("NN")) {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounStringAmb,currentTargetGen);
    }
 else {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounStringAmb,currentTarget);
    }
  }
  if (sgdem.matches()) {
    rest=currentQuestionString.substring(currentQuestionString.indexOf(sgdem.group(2)) + sgdem.group(2).length() + 1).toLowerCase();
    for (int i=0; i < tokens.length; i++) {
      if (rest.contains(tokens[i].toLowerCase())) {
        currentQuestionString=currentQuestionString.replaceAll(" " + tokens[i].toLowerCase() + "\\b","");
        currentQuestionString=currentQuestionString.replaceAll("\\b" + tokens[i].toLowerCase() + " ","");
        currentQuestionString=currentQuestionString.replaceAll(singularDemPronounString,currentTarget);
      }
    }
    currentQuestionString=currentQuestionString.replaceAll(singularDemPronounString,currentTargetGen);
  }
  if (pldem.matches()) {
    rest=currentQuestionString.substring(currentQuestionString.indexOf(pldem.group(2)) + pldem.group(2).length() + 1).toLowerCase();
    for (int i=0; i < tokens.length; i++) {
      if (rest.contains(tokens[i].toLowerCase())) {
        currentQuestionString=currentQuestionString.replaceAll(" " + tokens[i].toLowerCase() + "\\b","");
        currentQuestionString=currentQuestionString.replaceAll("\\b" + tokens[i].toLowerCase() + " ","");
        currentQuestionString=currentQuestionString.replaceAll(pluralDemPronounString,currentTarget);
      }
    }
    currentQuestionString=currentQuestionString.replaceAll(pluralDemPronounString,currentTargetGen);
  }
  if (sgpers.matches()) {
    exp=2;
    if (!(checkPl(tokens)) || (targetThing) || (next == 0)) {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounString,currentTarget);
    }
 else {
      if (usePreviousAnswer(questions,next,exp) != null) {
        currentTarget=usePreviousAnswer(questions,next,exp);
      }
      currentQuestionString=currentQuestionString.replaceAll(singularThirdPersonPronounString,currentTarget);
    }
  }
  if (sgthing.matches()) {
    exp=1;
    if (!(checkPl(tokens)) || (targetPerson) || (next == 0)) {
      currentQuestionString=currentQuestionString.replaceAll(singularThirdThingPronounString,currentTarget);
    }
 else {
      if (usePreviousAnswer(questions,next,exp) != null) {
        currentTarget=usePreviousAnswer(questions,next,exp);
      }
      currentQuestionString=currentQuestionString.replaceAll(singularThirdThingPronounString,currentTarget);
    }
  }
  if (plpers.matches()) {
    currentQuestionString=currentQuestionString.replaceAll(pluralThirdPersonPronounString,currentTarget);
  }
  questions[next].setQuestionString(currentQuestionString);
  MsgPrinter.printResolvedQuestion(questions[next].getQuestionString());
}
