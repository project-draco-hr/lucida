{
  try {
    if (loadGrammar) {
      if (manager == null)       getGrammarManager();
      loadXML();
      loadGrammar=false;
    }
    ruleStack=new RuleStack();
    newGrammar();
    firstNode=createGrammarNode("<sil>");
    GrammarNode finalNode=createGrammarNode("<sil>");
    finalNode.setFinalNode(true);
    for (    Map.Entry<String,JSGFRule> entry : rules.entrySet()) {
      GrammarGraph publicRuleGraph=new GrammarGraph();
      ruleStack.push(entry.getKey(),publicRuleGraph);
      GrammarGraph graph=processRule(entry.getValue());
      ruleStack.pop();
      firstNode.add(publicRuleGraph.getStartNode(),0.0f);
      publicRuleGraph.getEndNode().add(finalNode,0.0f);
      publicRuleGraph.getStartNode().add(graph.getStartNode(),0.0f);
      graph.getEndNode().add(publicRuleGraph.getEndNode(),0.0f);
    }
    postProcessGrammar();
  }
 catch (  MalformedURLException mue) {
    throw new IOException("bad base grammar URL " + baseURL + ' '+ mue);
  }
}
