{
  Data inputData=getPredecessor().getData();
  int i;
  if (inputData instanceof DataStartSignal) {
    power=null;
    noise=null;
    floor=null;
    peak=null;
    return inputData;
  }
  if (!(inputData instanceof DoubleData)) {
    return inputData;
  }
  DoubleData inputDoubleData=(DoubleData)inputData;
  double[] input=inputDoubleData.getValues();
  int length=input.length;
  if (power == null)   initStatistics(input,length);
  updatePower(input);
  estimateEnvelope(power,noise);
  double[] signal=new double[length];
  for (i=0; i < length; i++) {
    signal[i]=Math.max(power[i] - noise[i],0.0);
  }
  estimateEnvelope(signal,floor);
  tempMasking(signal);
  powerBoosting(signal);
  double[] gain=new double[length];
  for (i=0; i < length; i++) {
    gain[i]=signal[i] / (power[i] + EPS);
    gain[i]=Math.min(Math.max(gain[i],1.0 / maxGain),maxGain);
  }
  double[] smoothGain=smooth(gain);
  for (i=0; i < length; i++) {
    input[i]*=smoothGain[i];
  }
  return inputData;
}
