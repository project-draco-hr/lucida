{
  ArrayList<String> targets=new ArrayList<String>();
  targets.add(target);
  boolean isPerson=false;
  boolean brackets=false;
  if (target.startsWith("the ")) {
    targets.add(target.substring(4,target.length()));
  }
 else   if (target.startsWith("an ")) {
    targets.add(target.substring(3,target.length()));
  }
 else   if (target.startsWith("a ")) {
    targets.add(target.substring(2,target.length()));
  }
  String targetType=this.checkType(target);
  if (TEST_TARGET_GENERATION) {
    if (targetType == null)     System.out.println(" target type could not be determined");
 else     System.out.println(" target type is " + targetType);
  }
  if (person.equals(targetType)) {
    isPerson=true;
  }
 else   if (target.contains("(") && target.contains(")")) {
    int i1=target.indexOf("(");
    int i2=target.indexOf(")");
    String s1=target.substring(0,i1 - 1);
    String s2=target.substring(i1 + 1,i2);
    targets.clear();
    targets.add(s1);
    targets.add(s2);
    brackets=true;
  }
 else   if (this.cutExtension(target,targets)) {
  }
 else   if (target.endsWith("University")) {
    String toAdd=target.substring(0,target.length() - 11);
    targets.add(toAdd);
  }
 else   if (target.endsWith("International")) {
    String toAdd=target.substring(0,target.length() - 14);
    targets.add(toAdd);
  }
 else   if (target.endsWith("Corporation")) {
    String toAdd=target.substring(0,target.length() - 12);
    targets.add(toAdd);
  }
 else {
    this.extractUpperCaseParts(targets);
    HashSet<String> duplicateFreeTargets=new LinkedHashSet<String>(targets);
    for (Iterator<String> iter=duplicateFreeTargets.iterator(); iter.hasNext(); ) {
      String item=iter.next();
      String type=this.checkType(item);
      if (person.equals(type)) {
        targets.add(item);
      }
    }
  }
  if (isPerson) {
    targets.add("\"" + target + "\"");
  }
 else   if (!brackets) {
    this.extractUpperCaseParts(targets);
    this.cutFirstNpInNpSequence(targets);
    this.extractAcronyms(targets);
    this.postProcess(targets);
  }
  HashSet<String> duplicateFreeTargets=new LinkedHashSet<String>(targets);
  for (Iterator<String> iter=duplicateFreeTargets.iterator(); iter.hasNext(); ) {
    String item=iter.next();
    String type=this.checkType(item);
    if (organization.equals(type)) {
      targets.add("the " + item);
      if (!brackets)       targets.add("the " + target);
    }
 else     if (person.equals(type)) {
      targets.add("\"" + item + "\"");
    }
    if (item.matches("([A-Z]){3,}"))     targets.add("the " + item);
 else     if (item.matches("([A-Z]\\.){2,}"))     targets.add("the " + item);
  }
  duplicateFreeTargets=new LinkedHashSet<String>(targets);
  for (Iterator<String> iter=duplicateFreeTargets.iterator(); iter.hasNext(); ) {
    String item=iter.next();
    if (item.matches("([A-Z][a-z]++)++")) {
      targets.add("\"" + item + "\"");
    }
  }
  String[] targetTokens=NETagger.tokenize(target);
  if (targetTokens.length > 1) {
    targets.add("\"" + target + "\"");
  }
  duplicateFreeTargets=new LinkedHashSet<String>(targets);
  return duplicateFreeTargets.toArray(new String[duplicateFreeTargets.size()]);
}
