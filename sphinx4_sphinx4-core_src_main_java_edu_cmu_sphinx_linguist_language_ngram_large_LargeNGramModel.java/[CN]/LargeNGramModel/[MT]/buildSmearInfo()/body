{
  double S0=0;
  double R0=0;
  bigramSmearMap=new HashMap<Long,Float>();
  double[] ugNumerator=new double[unigrams.length];
  double[] ugDenominator=new double[unigrams.length];
  double[] ugAvgLogProb=new double[unigrams.length];
  unigramSmearTerm=new float[unigrams.length];
  for (  UnigramProbability unigram : unigrams) {
    float logp=unigram.getLogProbability();
    double p=logMath.logToLinear(logp);
    S0+=p * logp;
    R0+=p * logp * logp;
  }
  System.out.println("R0 S0 " + R0 + ' '+ S0);
  for (int i=0; i < loadedBigramBuffers.length; i++) {
    NGramBuffer bigram=getBigramBuffer(i);
    if (bigram == null) {
      unigramSmearTerm[i]=LogMath.LOG_ONE;
      continue;
    }
    ugNumerator[i]=0.0;
    ugDenominator[i]=0.0;
    ugAvgLogProb[i]=0.0;
    float logugbackoff=unigrams[i].getLogBackoff();
    double ugbackoff=logMath.logToLinear(logugbackoff);
    for (int j=0; j < bigram.getNumberNGrams(); j++) {
      int wordID=bigram.getWordID(j);
      NGramProbability bgProb=bigram.getNGramProbability(j);
      float logugprob=unigrams[wordID].getLogProbability();
      float logbgprob=ngramProbTable[1][bgProb.getProbabilityID()];
      double ugprob=logMath.logToLinear(logugprob);
      double bgprob=logMath.logToLinear(logbgprob);
      double backoffbgprob=ugbackoff * ugprob;
      double logbackoffbgprob=logMath.linearToLog(backoffbgprob);
      ugNumerator[i]+=(bgprob * logbgprob - backoffbgprob * logbackoffbgprob) * logugprob;
      ugDenominator[i]+=(bgprob - backoffbgprob) * logugprob;
    }
    ugNumerator[i]+=ugbackoff * (logugbackoff * S0 + R0);
    ugAvgLogProb[i]=ugDenominator[i] + ugbackoff * S0;
    ugDenominator[i]+=ugbackoff * R0;
    unigramSmearTerm[i]=(float)(ugNumerator[i] / ugDenominator[i]);
  }
  for (int i=0; i < loadedBigramBuffers.length; i++) {
    System.out.println("Processed " + i + " of "+ loadedBigramBuffers.length);
    NGramBuffer bigram=getBigramBuffer(i);
    if (bigram == null)     continue;
    for (int j=0; j < bigram.getNumberNGrams(); j++) {
      float smearTerm;
      NGramProbability bgProb=bigram.getNGramProbability(j);
      float logbgbackoff=ngramBackoffTable[2][bgProb.getBackoffID()];
      double bgbackoff=logMath.logToLinear(logbgbackoff);
      int k=bigram.getWordID(j);
      NGramBuffer trigram=loadTrigramBuffer(i,k);
      if (trigram == null)       smearTerm=unigramSmearTerm[k];
 else {
        double bg_numerator=0;
        double bg_denominator=0;
        for (int l=0; l < trigram.getNumberNGrams(); l++) {
          int m=trigram.getWordID(l);
          float logtgprob=ngramProbTable[2][trigram.getProbabilityID(l)];
          double tgprob=logMath.logToLinear(logtgprob);
          float logbgprob=getBigramProb(k,m);
          double bgprob=logMath.logToLinear(logbgprob);
          float logugprob=unigrams[m].getLogProbability();
          double backofftgprob=bgbackoff * bgprob;
          double logbackofftgprob=logMath.linearToLog(backofftgprob);
          bg_numerator+=(tgprob * logtgprob - backofftgprob * logbackofftgprob) * logugprob;
          bg_denominator+=(tgprob - backofftgprob) * logugprob * logugprob;
        }
        bg_numerator+=bgbackoff * (logbgbackoff * ugAvgLogProb[k] - ugNumerator[k]);
        bg_denominator+=bgbackoff * ugDenominator[k];
        smearTerm=(float)(bg_numerator / bg_denominator);
        smearTermCount++;
      }
      putSmearTerm(i,k,smearTerm);
    }
  }
  System.out.println("Smear count is " + smearTermCount);
}
